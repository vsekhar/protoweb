// Code generated by protoc-gen-go. DO NOT EDIT.
// source: web.proto

package web

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("web.proto", fileDescriptor_461bb3ac99194e85) }

var fileDescriptor_461bb3ac99194e85 = []byte{
	// 96 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x4f, 0x4d, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x4f, 0x4d, 0x92, 0xe2, 0x2d, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x81, 0x88, 0x49, 0xf1, 0x15, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x42,
	0xf8, 0x46, 0x5a, 0x5c, 0xcc, 0xe1, 0xa9, 0x49, 0x42, 0xca, 0x5c, 0x4c, 0x2e, 0xfe, 0x42, 0x3c,
	0x7a, 0x20, 0xcd, 0x41, 0x10, 0x0d, 0x52, 0xbc, 0x50, 0x1e, 0x44, 0xbd, 0x01, 0x63, 0x12, 0x1b,
	0x58, 0x8b, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x40, 0xf1, 0xcc, 0xb1, 0x63, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebClient is the client API for Web service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebClient interface {
	// TODO: should the methods be captured here? separate request/response messages?
	DO(ctx context.Context, in *Request, opts ...grpc.CallOption) (Web_DOClient, error)
}

type webClient struct {
	cc *grpc.ClientConn
}

func NewWebClient(cc *grpc.ClientConn) WebClient {
	return &webClient{cc}
}

func (c *webClient) DO(ctx context.Context, in *Request, opts ...grpc.CallOption) (Web_DOClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Web_serviceDesc.Streams[0], "/web.Web/DO", opts...)
	if err != nil {
		return nil, err
	}
	x := &webDOClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Web_DOClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type webDOClient struct {
	grpc.ClientStream
}

func (x *webDOClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebServer is the server API for Web service.
type WebServer interface {
	// TODO: should the methods be captured here? separate request/response messages?
	DO(*Request, Web_DOServer) error
}

// UnimplementedWebServer can be embedded to have forward compatible implementations.
type UnimplementedWebServer struct {
}

func (*UnimplementedWebServer) DO(req *Request, srv Web_DOServer) error {
	return status.Errorf(codes.Unimplemented, "method DO not implemented")
}

func RegisterWebServer(s *grpc.Server, srv WebServer) {
	s.RegisterService(&_Web_serviceDesc, srv)
}

func _Web_DO_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebServer).DO(m, &webDOServer{stream})
}

type Web_DOServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type webDOServer struct {
	grpc.ServerStream
}

func (x *webDOServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _Web_serviceDesc = grpc.ServiceDesc{
	ServiceName: "web.Web",
	HandlerType: (*WebServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DO",
			Handler:       _Web_DO_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "web.proto",
}
