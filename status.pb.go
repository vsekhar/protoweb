// Code generated by protoc-gen-go. DO NOT EDIT.
// source: status.proto

package web

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
type Status_Codes int32

const (
	Status_Codes_STATUS_CODE_UNUSED              Status_Codes = 0
	Status_Codes_CONTINUE                        Status_Codes = 100
	Status_Codes_SWITCING_PROTOCOLS              Status_Codes = 101
	Status_Codes_PROCESSING                      Status_Codes = 102
	Status_Codes_EARLY_HINTS                     Status_Codes = 103
	Status_Codes_OK                              Status_Codes = 200
	Status_Codes_CREATED                         Status_Codes = 201
	Status_Codes_ACCEPTED                        Status_Codes = 202
	Status_Codes_NON_AUTHORITATIVE_INFORMATION   Status_Codes = 203
	Status_Codes_NO_CONTENT                      Status_Codes = 204
	Status_Codes_RESET_CONTENT                   Status_Codes = 205
	Status_Codes_PARTIAL_CONTENT                 Status_Codes = 206
	Status_Codes_MULTI_STATUS                    Status_Codes = 207
	Status_Codes_ALREADY_REPORTED                Status_Codes = 208
	Status_Codes_IM_USED                         Status_Codes = 226
	Status_Codes_MULTIPLE_CHOICES                Status_Codes = 300
	Status_Codes_MOVED_PERMANENTLY               Status_Codes = 301
	Status_Codes_FOUND                           Status_Codes = 302
	Status_Codes_SEE_OTHER                       Status_Codes = 303
	Status_Codes_NOT_MODIFIED                    Status_Codes = 304
	Status_Codes_USE_PROXY                       Status_Codes = 305
	Status_Codes_TEMPORARY_REDIRECT              Status_Codes = 307
	Status_Codes_PERMANENT_REDIRECT              Status_Codes = 308
	Status_Codes_BAD_REQUEST                     Status_Codes = 400
	Status_Codes_NOT_AUTHORIZED                  Status_Codes = 401
	Status_Codes_PAYMENT_REQUIRED                Status_Codes = 402
	Status_Codes_FORBIDDEN                       Status_Codes = 403
	Status_Codes_NOT_FOUND                       Status_Codes = 404
	Status_Codes_METHOD_NOT_ALLOWED              Status_Codes = 405
	Status_Codes_NOT_ACCEPTABLE                  Status_Codes = 406
	Status_Codes_PROXY_AUTHENTICATION_REQUIRED   Status_Codes = 407
	Status_Codes_REQUEST_TIMEOUT                 Status_Codes = 408
	Status_Codes_CONFLICT                        Status_Codes = 409
	Status_Codes_GONE                            Status_Codes = 410
	Status_Codes_LENGTH_REQUIRED                 Status_Codes = 411
	Status_Codes_PRECONDITION_FAILED             Status_Codes = 412
	Status_Codes_PAYLOAD_TOO_LARGE               Status_Codes = 413
	Status_Codes_URI_TOO_LONG                    Status_Codes = 414
	Status_Codes_UNSUPPORTED_MEDIA_TYPE          Status_Codes = 415
	Status_Codes_RANGE_NOT_SATISFIABLE           Status_Codes = 416
	Status_Codes_EXPECTATION_FAILED              Status_Codes = 417
	Status_Codes_MISDIRECTED_REQUEST             Status_Codes = 421
	Status_Codes_UNPROCESSABLE_ENTITY            Status_Codes = 422
	Status_Codes_LOCKED                          Status_Codes = 423
	Status_Codes_FAILED_DEPENDENCY               Status_Codes = 424
	Status_Codes_TOO_EARLY                       Status_Codes = 425
	Status_Codes_UPGRADE_REQUIRED                Status_Codes = 426
	Status_Codes_PRECONDITION_REQUIRED           Status_Codes = 428
	Status_Codes_TOO_MANY_REQUESTS               Status_Codes = 429
	Status_Codes_REQUEST_HEADER_FIELDS_TOO_LARGE Status_Codes = 431
	Status_Codes_UNAVAILABLE_FOR_LEGAL_REASONS   Status_Codes = 451
	Status_Codes_INTERNAL_SERVER_ERROR           Status_Codes = 500
	Status_Codes_NOT_IMPLEMENTED                 Status_Codes = 501
	Status_Codes_BAD_GATEWAY                     Status_Codes = 502
	Status_Codes_SERVICE_UNAVAILABLE             Status_Codes = 503
	Status_Codes_GATEWAY_TIMEOUT                 Status_Codes = 504
	Status_Codes_HTTP_VERSION_NOT_SUPPORTED      Status_Codes = 505
	Status_Codes_VARIANT_ALSO_NEGOTIATES         Status_Codes = 506
	Status_Codes_INSUFFICIENT_STORAGE            Status_Codes = 507
	Status_Codes_LOOP_DETECTED                   Status_Codes = 508
	Status_Codes_NOT_EXTENDED                    Status_Codes = 510
	Status_Codes_NETWORK_AUTHENTICATION_REQUIRED Status_Codes = 511
)

var Status_Codes_name = map[int32]string{
	0:   "STATUS_CODE_UNUSED",
	100: "CONTINUE",
	101: "SWITCING_PROTOCOLS",
	102: "PROCESSING",
	103: "EARLY_HINTS",
	200: "OK",
	201: "CREATED",
	202: "ACCEPTED",
	203: "NON_AUTHORITATIVE_INFORMATION",
	204: "NO_CONTENT",
	205: "RESET_CONTENT",
	206: "PARTIAL_CONTENT",
	207: "MULTI_STATUS",
	208: "ALREADY_REPORTED",
	226: "IM_USED",
	300: "MULTIPLE_CHOICES",
	301: "MOVED_PERMANENTLY",
	302: "FOUND",
	303: "SEE_OTHER",
	304: "NOT_MODIFIED",
	305: "USE_PROXY",
	307: "TEMPORARY_REDIRECT",
	308: "PERMANENT_REDIRECT",
	400: "BAD_REQUEST",
	401: "NOT_AUTHORIZED",
	402: "PAYMENT_REQUIRED",
	403: "FORBIDDEN",
	404: "NOT_FOUND",
	405: "METHOD_NOT_ALLOWED",
	406: "NOT_ACCEPTABLE",
	407: "PROXY_AUTHENTICATION_REQUIRED",
	408: "REQUEST_TIMEOUT",
	409: "CONFLICT",
	410: "GONE",
	411: "LENGTH_REQUIRED",
	412: "PRECONDITION_FAILED",
	413: "PAYLOAD_TOO_LARGE",
	414: "URI_TOO_LONG",
	415: "UNSUPPORTED_MEDIA_TYPE",
	416: "RANGE_NOT_SATISFIABLE",
	417: "EXPECTATION_FAILED",
	421: "MISDIRECTED_REQUEST",
	422: "UNPROCESSABLE_ENTITY",
	423: "LOCKED",
	424: "FAILED_DEPENDENCY",
	425: "TOO_EARLY",
	426: "UPGRADE_REQUIRED",
	428: "PRECONDITION_REQUIRED",
	429: "TOO_MANY_REQUESTS",
	431: "REQUEST_HEADER_FIELDS_TOO_LARGE",
	451: "UNAVAILABLE_FOR_LEGAL_REASONS",
	500: "INTERNAL_SERVER_ERROR",
	501: "NOT_IMPLEMENTED",
	502: "BAD_GATEWAY",
	503: "SERVICE_UNAVAILABLE",
	504: "GATEWAY_TIMEOUT",
	505: "HTTP_VERSION_NOT_SUPPORTED",
	506: "VARIANT_ALSO_NEGOTIATES",
	507: "INSUFFICIENT_STORAGE",
	508: "LOOP_DETECTED",
	510: "NOT_EXTENDED",
	511: "NETWORK_AUTHENTICATION_REQUIRED",
}

var Status_Codes_value = map[string]int32{
	"STATUS_CODE_UNUSED":              0,
	"CONTINUE":                        100,
	"SWITCING_PROTOCOLS":              101,
	"PROCESSING":                      102,
	"EARLY_HINTS":                     103,
	"OK":                              200,
	"CREATED":                         201,
	"ACCEPTED":                        202,
	"NON_AUTHORITATIVE_INFORMATION":   203,
	"NO_CONTENT":                      204,
	"RESET_CONTENT":                   205,
	"PARTIAL_CONTENT":                 206,
	"MULTI_STATUS":                    207,
	"ALREADY_REPORTED":                208,
	"IM_USED":                         226,
	"MULTIPLE_CHOICES":                300,
	"MOVED_PERMANENTLY":               301,
	"FOUND":                           302,
	"SEE_OTHER":                       303,
	"NOT_MODIFIED":                    304,
	"USE_PROXY":                       305,
	"TEMPORARY_REDIRECT":              307,
	"PERMANENT_REDIRECT":              308,
	"BAD_REQUEST":                     400,
	"NOT_AUTHORIZED":                  401,
	"PAYMENT_REQUIRED":                402,
	"FORBIDDEN":                       403,
	"NOT_FOUND":                       404,
	"METHOD_NOT_ALLOWED":              405,
	"NOT_ACCEPTABLE":                  406,
	"PROXY_AUTHENTICATION_REQUIRED":   407,
	"REQUEST_TIMEOUT":                 408,
	"CONFLICT":                        409,
	"GONE":                            410,
	"LENGTH_REQUIRED":                 411,
	"PRECONDITION_FAILED":             412,
	"PAYLOAD_TOO_LARGE":               413,
	"URI_TOO_LONG":                    414,
	"UNSUPPORTED_MEDIA_TYPE":          415,
	"RANGE_NOT_SATISFIABLE":           416,
	"EXPECTATION_FAILED":              417,
	"MISDIRECTED_REQUEST":             421,
	"UNPROCESSABLE_ENTITY":            422,
	"LOCKED":                          423,
	"FAILED_DEPENDENCY":               424,
	"TOO_EARLY":                       425,
	"UPGRADE_REQUIRED":                426,
	"PRECONDITION_REQUIRED":           428,
	"TOO_MANY_REQUESTS":               429,
	"REQUEST_HEADER_FIELDS_TOO_LARGE": 431,
	"UNAVAILABLE_FOR_LEGAL_REASONS":   451,
	"INTERNAL_SERVER_ERROR":           500,
	"NOT_IMPLEMENTED":                 501,
	"BAD_GATEWAY":                     502,
	"SERVICE_UNAVAILABLE":             503,
	"GATEWAY_TIMEOUT":                 504,
	"HTTP_VERSION_NOT_SUPPORTED":      505,
	"VARIANT_ALSO_NEGOTIATES":         506,
	"INSUFFICIENT_STORAGE":            507,
	"LOOP_DETECTED":                   508,
	"NOT_EXTENDED":                    510,
	"NETWORK_AUTHENTICATION_REQUIRED": 511,
}

func (x Status_Codes) String() string {
	return proto.EnumName(Status_Codes_name, int32(x))
}

func (Status_Codes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{0}
}

type Status_Code_Descriptor struct {
	Description          string   `protobuf:"bytes,1,opt,name=Description,proto3" json:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status_Code_Descriptor) Reset()         { *m = Status_Code_Descriptor{} }
func (m *Status_Code_Descriptor) String() string { return proto.CompactTextString(m) }
func (*Status_Code_Descriptor) ProtoMessage()    {}
func (*Status_Code_Descriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{0}
}

func (m *Status_Code_Descriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status_Code_Descriptor.Unmarshal(m, b)
}
func (m *Status_Code_Descriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status_Code_Descriptor.Marshal(b, m, deterministic)
}
func (m *Status_Code_Descriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status_Code_Descriptor.Merge(m, src)
}
func (m *Status_Code_Descriptor) XXX_Size() int {
	return xxx_messageInfo_Status_Code_Descriptor.Size(m)
}
func (m *Status_Code_Descriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_Status_Code_Descriptor.DiscardUnknown(m)
}

var xxx_messageInfo_Status_Code_Descriptor proto.InternalMessageInfo

func (m *Status_Code_Descriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

var E_StatusCodeDescriptor = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*Status_Code_Descriptor)(nil),
	Field:         7987672,
	Name:          "web.status_code_descriptor",
	Tag:           "bytes,7987672,opt,name=status_code_descriptor",
	Filename:      "status.proto",
}

func init() {
	proto.RegisterEnum("web.Status_Codes", Status_Codes_name, Status_Codes_value)
	proto.RegisterType((*Status_Code_Descriptor)(nil), "web.Status_Code_Descriptor")
	proto.RegisterExtension(E_StatusCodeDescriptor)
}

func init() { proto.RegisterFile("status.proto", fileDescriptor_dfe4fce6682daf5b) }

var fileDescriptor_dfe4fce6682daf5b = []byte{
	// 1109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xcb, 0x93, 0x54, 0xb5,
	0x17, 0xe6, 0x76, 0x60, 0x68, 0xd2, 0x03, 0x1c, 0x02, 0x0c, 0xfc, 0x86, 0x9f, 0x32, 0x76, 0xb9,
	0xa0, 0x5c, 0x34, 0x55, 0xba, 0x63, 0x17, 0x6e, 0x4e, 0xdf, 0x4e, 0x71, 0x6f, 0x72, 0x49, 0x72,
	0x7b, 0x68, 0x37, 0x29, 0x06, 0x1a, 0xa4, 0x0a, 0x69, 0x8a, 0x99, 0x29, 0xb6, 0xfe, 0x07, 0xbe,
	0xdf, 0xe2, 0xab, 0x7c, 0xf3, 0x14, 0x75, 0xe7, 0x0a, 0xac, 0xf2, 0xfd, 0x5a, 0xa9, 0x4b, 0x75,
	0xe1, 0x1f, 0xe0, 0xfb, 0x81, 0x5a, 0x49, 0x4f, 0x77, 0x8f, 0x55, 0xba, 0x3a, 0x75, 0x4f, 0x92,
	0xf3, 0x7d, 0xe7, 0xfb, 0x92, 0x7b, 0xe8, 0xf4, 0xe2, 0xd2, 0xe1, 0xa5, 0xe5, 0xc5, 0xd6, 0xe9,
	0x33, 0x83, 0xa5, 0x01, 0x23, 0x67, 0xfb, 0x0b, 0xb3, 0x73, 0xc7, 0x07, 0x83, 0xe3, 0x27, 0xfb,
	0x7b, 0x63, 0x6a, 0x61, 0xf9, 0xd8, 0xde, 0xa3, 0xfd, 0xc5, 0x23, 0x67, 0x4e, 0x9c, 0x5e, 0x1a,
	0x9c, 0x19, 0x6e, 0x6b, 0xee, 0xa3, 0x33, 0x36, 0x1e, 0xf3, 0xe9, 0xe0, 0x68, 0xdf, 0x8b, 0xf1,
	0x3a, 0x9b, 0xa3, 0x8d, 0xd1, 0xd7, 0x89, 0xc1, 0xa9, 0x9d, 0xc9, 0x5c, 0xb2, 0x67, 0x83, 0x59,
	0x9d, 0xba, 0xed, 0xab, 0x06, 0x9d, 0x5e, 0x75, 0x78, 0x91, 0xed, 0xa6, 0xcc, 0x3a, 0xee, 0x2a,
	0xeb, 0x53, 0x2d, 0xd0, 0x57, 0xaa, 0xb2, 0x28, 0x60, 0xcd, 0xec, 0xfa, 0x6b, 0xe7, 0xde, 0xbe,
	0xb9, 0x46, 0xd7, 0xb0, 0x69, 0x5a, 0x4f, 0xb5, 0x72, 0x52, 0x55, 0x08, 0x47, 0xd9, 0x0c, 0x65,
	0x76, 0x5e, 0xba, 0x54, 0xaa, 0xcc, 0x97, 0x46, 0x3b, 0x9d, 0xea, 0xdc, 0x42, 0x9f, 0x6d, 0xa2,
	0xb4, 0x34, 0x3a, 0x45, 0x6b, 0xa5, 0xca, 0xe0, 0x18, 0xdb, 0x4c, 0x1b, 0xc8, 0x4d, 0xde, 0xf3,
	0x1d, 0xa9, 0x9c, 0x85, 0xe3, 0x6c, 0x3d, 0xad, 0xe9, 0x03, 0xf0, 0x5e, 0xc2, 0xa6, 0xe9, 0xfa,
	0xd4, 0x20, 0x77, 0x28, 0xe0, 0xfd, 0x84, 0x6d, 0xa4, 0x75, 0x9e, 0xa6, 0x58, 0x86, 0xcf, 0x0f,
	0x12, 0xd6, 0xa4, 0x37, 0x29, 0xad, 0x3c, 0xaf, 0x5c, 0x47, 0x1b, 0xe9, 0xb8, 0x93, 0x5d, 0xf4,
	0x52, 0xb5, 0xb5, 0x29, 0xb8, 0x93, 0x5a, 0xc1, 0x87, 0x09, 0xdb, 0x4c, 0xa9, 0xd2, 0x3e, 0x70,
	0x42, 0xe5, 0xe0, 0xa3, 0x84, 0x31, 0xba, 0xd1, 0xa0, 0x45, 0x37, 0xce, 0x7d, 0x9c, 0xb0, 0x6d,
	0x74, 0x73, 0xc9, 0x8d, 0x93, 0x3c, 0x1f, 0x67, 0x3f, 0x49, 0xd8, 0x16, 0x3a, 0x5d, 0x54, 0xb9,
	0x93, 0x7e, 0xd8, 0x32, 0x7c, 0x9a, 0xb0, 0xed, 0x14, 0x78, 0x6e, 0x90, 0x8b, 0x9e, 0x37, 0x58,
	0x6a, 0x13, 0x88, 0x7c, 0x16, 0x59, 0xca, 0xc2, 0x47, 0x2d, 0xbe, 0x89, 0x9b, 0xe2, 0xb9, 0x32,
	0x47, 0x9f, 0x76, 0xb4, 0x4c, 0xd1, 0xc2, 0x85, 0x1a, 0x9b, 0xa1, 0x5b, 0x0a, 0xdd, 0x45, 0xe1,
	0x4b, 0x34, 0x05, 0x57, 0xa8, 0x5c, 0xde, 0x83, 0x8b, 0x35, 0x46, 0xe9, 0xba, 0xb6, 0xae, 0x94,
	0x80, 0x4b, 0x35, 0xb6, 0x89, 0x6e, 0xb0, 0x88, 0x5e, 0xbb, 0x0e, 0x1a, 0xb8, 0x5c, 0x0b, 0x14,
	0x94, 0x76, 0xbe, 0xd0, 0x42, 0xb6, 0x25, 0x0a, 0xb8, 0x12, 0xb7, 0x54, 0x16, 0x83, 0x9c, 0x87,
	0x7a, 0xf0, 0x7a, 0x8d, 0xed, 0xa0, 0xcc, 0x61, 0x51, 0x6a, 0xc3, 0x4d, 0x20, 0x25, 0xa4, 0xc1,
	0xd4, 0xc1, 0x1b, 0x71, 0x61, 0x8c, 0x34, 0x59, 0x78, 0xb3, 0xc6, 0x80, 0x36, 0xf6, 0x73, 0xe1,
	0x0d, 0x1e, 0xac, 0xd0, 0x3a, 0xb8, 0x8f, 0xb0, 0xad, 0x74, 0x53, 0x80, 0x59, 0x11, 0xf2, 0x4e,
	0x14, 0x70, 0x3f, 0x09, 0x6d, 0x94, 0xbc, 0x57, 0x0c, 0x4f, 0x1f, 0xac, 0xa4, 0x41, 0x01, 0x0f,
	0x90, 0x80, 0xdf, 0xd6, 0x66, 0xbf, 0x14, 0x02, 0x15, 0x3c, 0x18, 0xbf, 0xc3, 0xd9, 0x61, 0x0b,
	0x0f, 0x91, 0x00, 0x5b, 0xa0, 0xeb, 0x68, 0xe1, 0x63, 0xc9, 0x3c, 0xd7, 0xf3, 0x28, 0xe0, 0xe1,
	0x09, 0x48, 0x34, 0x90, 0xef, 0xcf, 0x11, 0x1e, 0x21, 0xc1, 0xc2, 0xd8, 0x49, 0xc4, 0x46, 0xe5,
	0x64, 0x1a, 0x9d, 0x9b, 0x20, 0x3e, 0x4a, 0x82, 0x3b, 0x2b, 0x5c, 0xbd, 0x93, 0x05, 0xea, 0xca,
	0xc1, 0x63, 0x24, 0xdc, 0x85, 0x54, 0xab, 0x76, 0x2e, 0x53, 0x07, 0x8f, 0x13, 0xb6, 0x81, 0xae,
	0xcd, 0xb4, 0x42, 0x78, 0x22, 0xee, 0xcf, 0x51, 0x65, 0xae, 0x33, 0xa9, 0xf2, 0x24, 0x61, 0x3b,
	0xe9, 0xd6, 0xd2, 0x60, 0xaa, 0x95, 0x90, 0x11, 0xa1, 0xcd, 0x65, 0x8e, 0x02, 0x9e, 0x22, 0xc1,
	0x98, 0x92, 0xf7, 0x72, 0xcd, 0x85, 0x77, 0x5a, 0xfb, 0x9c, 0x9b, 0x0c, 0xe1, 0x1c, 0x09, 0xe2,
	0x57, 0x46, 0x0e, 0x73, 0x5a, 0x65, 0xf0, 0x34, 0x61, 0xbb, 0xe8, 0x4c, 0xa5, 0x6c, 0x55, 0x0e,
	0xad, 0xf7, 0x05, 0x0a, 0xc9, 0xbd, 0xeb, 0x95, 0x08, 0xcf, 0x10, 0x36, 0x4b, 0xb7, 0x1b, 0xae,
	0x32, 0x8c, 0x8d, 0x5b, 0xee, 0xa4, 0x6d, 0xcb, 0xd8, 0xe7, 0xb3, 0x51, 0x15, 0x3c, 0x54, 0x62,
	0xea, 0xf8, 0x6a, 0xf0, 0xe7, 0x22, 0xad, 0x42, 0xda, 0xa1, 0x39, 0x38, 0x31, 0xe5, 0x45, 0xc2,
	0xfe, 0x47, 0xb7, 0x55, 0x6a, 0xe5, 0x99, 0x84, 0x32, 0x3e, 0xc8, 0xe3, 0x7a, 0xf0, 0x12, 0x61,
	0x0d, 0x3a, 0x95, 0xeb, 0xf4, 0x00, 0x0a, 0x78, 0x39, 0xd2, 0x1f, 0x96, 0xf3, 0x02, 0x4b, 0x54,
	0x02, 0x55, 0xda, 0x83, 0x57, 0xa2, 0x31, 0x81, 0x7a, 0x7c, 0x58, 0xf0, 0x6a, 0xf4, 0xb3, 0x2a,
	0x33, 0xc3, 0x05, 0x4e, 0x74, 0x79, 0x2d, 0xb2, 0xfe, 0x87, 0x2e, 0xe3, 0xb5, 0x0b, 0xb1, 0x74,
	0x28, 0x51, 0x70, 0xd5, 0x1b, 0x31, 0xb3, 0x70, 0x91, 0xb0, 0x5b, 0xe9, 0xee, 0x91, 0x23, 0x1d,
	0xe4, 0x02, 0x8d, 0x6f, 0x4b, 0xcc, 0x85, 0x5d, 0xa5, 0xdf, 0xe5, 0xe8, 0x6d, 0xa5, 0x78, 0x97,
	0xcb, 0x3c, 0xd2, 0x6f, 0x6b, 0xe3, 0x73, 0xcc, 0x78, 0xee, 0x0d, 0x72, 0xab, 0x95, 0x85, 0xeb,
	0x11, 0x5d, 0x2a, 0x87, 0x46, 0xf1, 0xdc, 0x5b, 0x34, 0x5d, 0x34, 0x1e, 0x8d, 0xd1, 0x06, 0x7e,
	0x88, 0x3e, 0x06, 0x25, 0x65, 0x51, 0xe6, 0x18, 0xae, 0x21, 0x0a, 0xf8, 0x91, 0x8c, 0x6e, 0x6f,
	0xc6, 0x1d, 0xce, 0xf3, 0x1e, 0xfc, 0x14, 0x25, 0x0c, 0x47, 0x65, 0x1a, 0x7e, 0x48, 0x63, 0x3c,
	0xf8, 0x39, 0x56, 0x58, 0xd9, 0x37, 0xbe, 0x39, 0xbf, 0x10, 0xb6, 0x9b, 0xce, 0x76, 0x9c, 0x2b,
	0x7d, 0x17, 0x8d, 0x0d, 0x1d, 0x47, 0xbb, 0x46, 0x9e, 0xc2, 0xaf, 0x84, 0xfd, 0x9f, 0xee, 0xe8,
	0x72, 0x23, 0xb9, 0x0a, 0xf7, 0xd7, 0x6a, 0xaf, 0x30, 0xd3, 0x4e, 0x72, 0x87, 0x16, 0x7e, 0x8b,
	0xbe, 0x48, 0x65, 0xab, 0x76, 0x5b, 0xa6, 0x32, 0x3c, 0x0e, 0xeb, 0xb4, 0xe1, 0x19, 0xc2, 0xef,
	0x24, 0xfc, 0x5b, 0x72, 0xad, 0x4b, 0x2f, 0xd0, 0x45, 0x3b, 0xe1, 0x0f, 0x32, 0x7a, 0xc2, 0x78,
	0xc8, 0x05, 0x6f, 0x04, 0xfc, 0x19, 0xe5, 0x53, 0xe8, 0xe6, 0xb5, 0x39, 0xf0, 0x9f, 0xd7, 0xfe,
	0x2f, 0xd2, 0x5c, 0x57, 0xbf, 0x0b, 0xde, 0x4d, 0x9a, 0x53, 0xf5, 0xcf, 0x13, 0xf8, 0x3a, 0xc4,
	0x6f, 0x13, 0x38, 0x5f, 0x6b, 0x4e, 0xd5, 0xaf, 0xd6, 0xe0, 0x6a, 0x88, 0x6f, 0xd5, 0xe0, 0x5e,
	0xd2, 0x9c, 0xaa, 0x3f, 0x4f, 0xe0, 0x85, 0x10, 0xcf, 0x13, 0x38, 0x1f, 0xe2, 0x25, 0x02, 0x97,
	0x42, 0xbc, 0x42, 0xe0, 0x5a, 0x88, 0xef, 0x10, 0xf8, 0x3e, 0xc4, 0x1b, 0x04, 0x6e, 0x84, 0x78,
	0xcf, 0x5a, 0xf8, 0x62, 0xed, 0xbe, 0xb3, 0x74, 0x66, 0x38, 0x4e, 0xfc, 0x91, 0x30, 0x17, 0x26,
	0x73, 0x83, 0xdd, 0xd2, 0x1a, 0x0e, 0x95, 0xd6, 0x68, 0xa8, 0xb4, 0xf0, 0xd4, 0xf2, 0xdd, 0xdd,
	0xc3, 0x27, 0x97, 0xfb, 0x3a, 0xce, 0x85, 0xc5, 0x9d, 0x5f, 0x5e, 0xff, 0x8e, 0xcc, 0x25, 0x7b,
	0x1a, 0xb7, 0xef, 0x6a, 0x9d, 0xed, 0x2f, 0xb4, 0xfe, 0x7d, 0xc0, 0x98, 0x6d, 0x43, 0x80, 0x90,
	0x9e, 0x64, 0x17, 0xa6, 0x62, 0xd9, 0x3b, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x97, 0xce, 0xc4,
	0xf2, 0xce, 0x06, 0x00, 0x00,
}
