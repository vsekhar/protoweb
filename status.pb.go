// Code generated by protoc-gen-go. DO NOT EDIT.
// source: status.proto

package web

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
type Status_Codes int32

const (
	Status_Codes_STATUS_CODE_UNUSED            Status_Codes = 0
	Status_Codes_CONTINUE                      Status_Codes = 100
	Status_Codes_SWITCING_PROTOCOLS            Status_Codes = 101
	Status_Codes_PROCESSING                    Status_Codes = 102
	Status_Codes_EARLY_HINTS                   Status_Codes = 103
	Status_Codes_OK                            Status_Codes = 200
	Status_Codes_CREATED                       Status_Codes = 201
	Status_Codes_ACCEPTED                      Status_Codes = 202
	Status_Codes_NON_AUTHORITATIVE_INFORMATION Status_Codes = 203
	Status_Codes_NO_CONTENT                    Status_Codes = 204
	Status_Codes_RESET_CONTENT                 Status_Codes = 205
	Status_Codes_PARTIAL_CONTENT               Status_Codes = 206
	Status_Codes_MULTI_STATUS                  Status_Codes = 207
	Status_Codes_ALREADY_REPORTED              Status_Codes = 208
	Status_Codes_IM_USED                       Status_Codes = 226
	Status_Codes_MULTIPLE_CHOICES              Status_Codes = 300
	Status_Codes_MOVED_PERMANENTLY             Status_Codes = 301
	Status_Codes_FOUND                         Status_Codes = 302
	Status_Codes_SEE_OTHER                     Status_Codes = 303
	Status_Codes_NOT_MODIFIED                  Status_Codes = 304
	Status_Codes_USE_PROXY                     Status_Codes = 305
	Status_Codes_TEMPORARY_REDIRECT            Status_Codes = 307
	Status_Codes_PERMANENT_REDIRECT            Status_Codes = 308
	Status_Codes_BAD_REQUEST                   Status_Codes = 400
	Status_Codes_NOT_AUTHORIZED                Status_Codes = 401
	Status_Codes_PAYMENT_REQUIRED              Status_Codes = 402
	Status_Codes_FORBIDDEN                     Status_Codes = 403
	Status_Codes_NOT_FOUND                     Status_Codes = 404
	Status_Codes_METHOD_NOT_ALLOWED            Status_Codes = 405
	Status_Codes_NOT_ACCEPTABLE                Status_Codes = 406
	Status_Codes_PROXY_AUTHENTICATION_REQUIRED Status_Codes = 407
	Status_Codes_REQUEST_TIMEOUT               Status_Codes = 408
	Status_Codes_CONFLICT                      Status_Codes = 409
	Status_Codes_GONE                          Status_Codes = 410
	Status_Codes_LENGTH_REQUIRED               Status_Codes = 411
	Status_Codes_PRECONDITION_FAILED           Status_Codes = 412
	Status_Codes_PAYLOAD_TOO_LARGE             Status_Codes = 413
	Status_Codes_URI_TOO_LONG                  Status_Codes = 414
	Status_Codes_UNSUPPORTED_MEDIA_TYPE        Status_Codes = 415
	Status_Codes_INTERNAL_SERVER_ERROR         Status_Codes = 500
	Status_Codes_NOT_IMPLEMENTED               Status_Codes = 501
	Status_Codes_BAD_GATEWAY                   Status_Codes = 502
	Status_Codes_GATEWAY_TIMEOUT               Status_Codes = 503
	Status_Codes_HTTP_VERSION_NOT_SUPPORTED    Status_Codes = 504
	Status_Codes_VARIANT_ALSO_NEGOTIATES       Status_Codes = 505
)

var Status_Codes_name = map[int32]string{
	0:   "STATUS_CODE_UNUSED",
	100: "CONTINUE",
	101: "SWITCING_PROTOCOLS",
	102: "PROCESSING",
	103: "EARLY_HINTS",
	200: "OK",
	201: "CREATED",
	202: "ACCEPTED",
	203: "NON_AUTHORITATIVE_INFORMATION",
	204: "NO_CONTENT",
	205: "RESET_CONTENT",
	206: "PARTIAL_CONTENT",
	207: "MULTI_STATUS",
	208: "ALREADY_REPORTED",
	226: "IM_USED",
	300: "MULTIPLE_CHOICES",
	301: "MOVED_PERMANENTLY",
	302: "FOUND",
	303: "SEE_OTHER",
	304: "NOT_MODIFIED",
	305: "USE_PROXY",
	307: "TEMPORARY_REDIRECT",
	308: "PERMANENT_REDIRECT",
	400: "BAD_REQUEST",
	401: "NOT_AUTHORIZED",
	402: "PAYMENT_REQUIRED",
	403: "FORBIDDEN",
	404: "NOT_FOUND",
	405: "METHOD_NOT_ALLOWED",
	406: "NOT_ACCEPTABLE",
	407: "PROXY_AUTHENTICATION_REQUIRED",
	408: "REQUEST_TIMEOUT",
	409: "CONFLICT",
	410: "GONE",
	411: "LENGTH_REQUIRED",
	412: "PRECONDITION_FAILED",
	413: "PAYLOAD_TOO_LARGE",
	414: "URI_TOO_LONG",
	415: "UNSUPPORTED_MEDIA_TYPE",
	500: "INTERNAL_SERVER_ERROR",
	501: "NOT_IMPLEMENTED",
	502: "BAD_GATEWAY",
	503: "GATEWAY_TIMEOUT",
	504: "HTTP_VERSION_NOT_SUPPORTED",
	505: "VARIANT_ALSO_NEGOTIATES",
}

var Status_Codes_value = map[string]int32{
	"STATUS_CODE_UNUSED":            0,
	"CONTINUE":                      100,
	"SWITCING_PROTOCOLS":            101,
	"PROCESSING":                    102,
	"EARLY_HINTS":                   103,
	"OK":                            200,
	"CREATED":                       201,
	"ACCEPTED":                      202,
	"NON_AUTHORITATIVE_INFORMATION": 203,
	"NO_CONTENT":                    204,
	"RESET_CONTENT":                 205,
	"PARTIAL_CONTENT":               206,
	"MULTI_STATUS":                  207,
	"ALREADY_REPORTED":              208,
	"IM_USED":                       226,
	"MULTIPLE_CHOICES":              300,
	"MOVED_PERMANENTLY":             301,
	"FOUND":                         302,
	"SEE_OTHER":                     303,
	"NOT_MODIFIED":                  304,
	"USE_PROXY":                     305,
	"TEMPORARY_REDIRECT":            307,
	"PERMANENT_REDIRECT":            308,
	"BAD_REQUEST":                   400,
	"NOT_AUTHORIZED":                401,
	"PAYMENT_REQUIRED":              402,
	"FORBIDDEN":                     403,
	"NOT_FOUND":                     404,
	"METHOD_NOT_ALLOWED":            405,
	"NOT_ACCEPTABLE":                406,
	"PROXY_AUTHENTICATION_REQUIRED": 407,
	"REQUEST_TIMEOUT":               408,
	"CONFLICT":                      409,
	"GONE":                          410,
	"LENGTH_REQUIRED":               411,
	"PRECONDITION_FAILED":           412,
	"PAYLOAD_TOO_LARGE":             413,
	"URI_TOO_LONG":                  414,
	"UNSUPPORTED_MEDIA_TYPE":        415,
	"INTERNAL_SERVER_ERROR":         500,
	"NOT_IMPLEMENTED":               501,
	"BAD_GATEWAY":                   502,
	"GATEWAY_TIMEOUT":               503,
	"HTTP_VERSION_NOT_SUPPORTED":    504,
	"VARIANT_ALSO_NEGOTIATES":       505,
}

func (x Status_Codes) String() string {
	return proto.EnumName(Status_Codes_name, int32(x))
}

func (Status_Codes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{0}
}

type Status_Code_Descriptor struct {
	Description          string   `protobuf:"bytes,1,opt,name=Description,proto3" json:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status_Code_Descriptor) Reset()         { *m = Status_Code_Descriptor{} }
func (m *Status_Code_Descriptor) String() string { return proto.CompactTextString(m) }
func (*Status_Code_Descriptor) ProtoMessage()    {}
func (*Status_Code_Descriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfe4fce6682daf5b, []int{0}
}

func (m *Status_Code_Descriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status_Code_Descriptor.Unmarshal(m, b)
}
func (m *Status_Code_Descriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status_Code_Descriptor.Marshal(b, m, deterministic)
}
func (m *Status_Code_Descriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status_Code_Descriptor.Merge(m, src)
}
func (m *Status_Code_Descriptor) XXX_Size() int {
	return xxx_messageInfo_Status_Code_Descriptor.Size(m)
}
func (m *Status_Code_Descriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_Status_Code_Descriptor.DiscardUnknown(m)
}

var xxx_messageInfo_Status_Code_Descriptor proto.InternalMessageInfo

func (m *Status_Code_Descriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

var E_StatusCodeDescriptor = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*Status_Code_Descriptor)(nil),
	Field:         7987672,
	Name:          "web.status_code_descriptor",
	Tag:           "bytes,7987672,opt,name=status_code_descriptor",
	Filename:      "status.proto",
}

func init() {
	proto.RegisterEnum("web.Status_Codes", Status_Codes_name, Status_Codes_value)
	proto.RegisterType((*Status_Code_Descriptor)(nil), "web.Status_Code_Descriptor")
	proto.RegisterExtension(E_StatusCodeDescriptor)
}

func init() { proto.RegisterFile("status.proto", fileDescriptor_dfe4fce6682daf5b) }

var fileDescriptor_dfe4fce6682daf5b = []byte{
	// 851 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x3b, 0x73, 0x1c, 0x45,
	0x10, 0xf6, 0xee, 0x60, 0xe9, 0x34, 0x3a, 0x4b, 0xed, 0xb1, 0x7d, 0x56, 0xc9, 0x80, 0xc5, 0x45,
	0x2e, 0x82, 0x73, 0x15, 0x64, 0xce, 0x46, 0x3b, 0x7d, 0x77, 0x53, 0xec, 0xce, 0xac, 0x67, 0x66,
	0x4f, 0x1c, 0xc9, 0x94, 0x65, 0x9d, 0x85, 0xab, 0x8c, 0xcf, 0xa5, 0xd3, 0x95, 0x7e, 0x06, 0xef,
	0x37, 0x86, 0x1f, 0xc0, 0xdb, 0x40, 0x46, 0x04, 0x01, 0xef, 0x57, 0x46, 0x0a, 0x04, 0x04, 0xa4,
	0x3c, 0x33, 0x6a, 0x66, 0xa5, 0x3b, 0x07, 0x8e, 0xb6, 0xba, 0xa7, 0xbb, 0xbf, 0xaf, 0xfb, 0xdb,
	0xfa, 0x68, 0x73, 0xb2, 0x7f, 0x65, 0x7f, 0x3a, 0xe9, 0xdc, 0xda, 0x1b, 0xef, 0x8f, 0x19, 0x39,
	0x18, 0x6d, 0xaf, 0x6f, 0xec, 0x8e, 0xc7, 0xbb, 0x37, 0x46, 0x17, 0x63, 0x6a, 0x7b, 0x7a, 0xed,
	0xe2, 0xce, 0x68, 0x72, 0x75, 0xef, 0xfa, 0xad, 0xfd, 0xf1, 0x5e, 0x5d, 0xd6, 0xbe, 0x44, 0x5b,
	0x36, 0xb6, 0xf9, 0x6c, 0xbc, 0x33, 0xf2, 0x62, 0xf6, 0xce, 0x36, 0xe8, 0xf2, 0x51, 0x74, 0x7d,
	0x7c, 0x73, 0x2d, 0xd9, 0x48, 0x2e, 0x2c, 0x99, 0xbb, 0x53, 0x0f, 0xff, 0xb1, 0x48, 0x9b, 0x77,
	0x35, 0x4f, 0xd8, 0x79, 0xca, 0xac, 0xe3, 0xae, 0xb2, 0x3e, 0xd3, 0x02, 0x7d, 0xa5, 0x2a, 0x8b,
	0x02, 0x8e, 0xad, 0x2f, 0x7e, 0x76, 0xfb, 0xd3, 0x07, 0x53, 0x7a, 0x8c, 0x35, 0x69, 0x23, 0xd3,
	0xca, 0x49, 0x55, 0x21, 0xec, 0xb0, 0x16, 0x65, 0x76, 0x4b, 0xba, 0x4c, 0xaa, 0x9e, 0x2f, 0x8d,
	0x76, 0x3a, 0xd3, 0xb9, 0x85, 0x11, 0x5b, 0xa1, 0xb4, 0x34, 0x3a, 0x43, 0x6b, 0xa5, 0xea, 0xc1,
	0x35, 0xb6, 0x4a, 0x97, 0x91, 0x9b, 0x7c, 0xe8, 0xfb, 0x52, 0x39, 0x0b, 0xbb, 0x6c, 0x91, 0xa6,
	0xfa, 0x31, 0xf8, 0x32, 0x61, 0x4d, 0xba, 0x98, 0x19, 0xe4, 0x0e, 0x05, 0x7c, 0x95, 0xb0, 0x13,
	0xb4, 0xc1, 0xb3, 0x0c, 0xcb, 0x10, 0x7e, 0x9d, 0xb0, 0x36, 0x7d, 0x40, 0x69, 0xe5, 0x79, 0xe5,
	0xfa, 0xda, 0x48, 0xc7, 0x9d, 0x1c, 0xa0, 0x97, 0xaa, 0xab, 0x4d, 0xc1, 0x9d, 0xd4, 0x0a, 0xbe,
	0x49, 0xd8, 0x2a, 0xa5, 0x4a, 0xfb, 0xc0, 0x09, 0x95, 0x83, 0x6f, 0x13, 0xc6, 0xe8, 0x09, 0x83,
	0x16, 0xdd, 0x2c, 0xf7, 0x5d, 0xc2, 0x4e, 0xd3, 0xd5, 0x92, 0x1b, 0x27, 0x79, 0x3e, 0xcb, 0x7e,
	0x9f, 0xb0, 0x93, 0xb4, 0x59, 0x54, 0xb9, 0x93, 0xbe, 0x5e, 0x19, 0x7e, 0x48, 0xd8, 0x19, 0x0a,
	0x3c, 0x37, 0xc8, 0xc5, 0xd0, 0x1b, 0x2c, 0xb5, 0x09, 0x44, 0x7e, 0x8c, 0x2c, 0x65, 0xe1, 0xe3,
	0x2d, 0x7e, 0x8d, 0x45, 0xb1, 0xaf, 0xcc, 0xd1, 0x67, 0x7d, 0x2d, 0x33, 0xb4, 0xf0, 0x4e, 0xca,
	0x5a, 0xf4, 0x64, 0xa1, 0x07, 0x28, 0x7c, 0x89, 0xa6, 0xe0, 0x0a, 0x95, 0xcb, 0x87, 0xf0, 0x6e,
	0xca, 0x28, 0x3d, 0xde, 0xd5, 0x95, 0x12, 0xf0, 0x5e, 0xca, 0x56, 0xe8, 0x92, 0x45, 0xf4, 0xda,
	0xf5, 0xd1, 0xc0, 0xfb, 0x69, 0xa0, 0xa0, 0xb4, 0xf3, 0x85, 0x16, 0xb2, 0x2b, 0x51, 0xc0, 0x07,
	0xb1, 0xa4, 0xb2, 0x18, 0xce, 0xf9, 0xf8, 0x10, 0x3e, 0x4c, 0xd9, 0x59, 0xca, 0x1c, 0x16, 0xa5,
	0x36, 0xdc, 0x04, 0x52, 0x42, 0x1a, 0xcc, 0x1c, 0x7c, 0x14, 0x1f, 0x66, 0x48, 0xf3, 0x87, 0x8f,
	0x53, 0x06, 0x74, 0x79, 0x93, 0x0b, 0x6f, 0xf0, 0x72, 0x85, 0xd6, 0xc1, 0x33, 0x84, 0x9d, 0xa2,
	0x2b, 0x01, 0xe6, 0xf0, 0x90, 0x4f, 0xa0, 0x80, 0x67, 0x49, 0x58, 0xa3, 0xe4, 0xc3, 0xa2, 0xee,
	0xbe, 0x5c, 0x49, 0x83, 0x02, 0x9e, 0x23, 0x01, 0xbf, 0xab, 0xcd, 0xa6, 0x14, 0x02, 0x15, 0x3c,
	0x1f, 0xe3, 0xd0, 0x5b, 0xaf, 0xf0, 0x02, 0x09, 0xb0, 0x05, 0xba, 0xbe, 0x16, 0x3e, 0x8e, 0xcc,
	0x73, 0xbd, 0x85, 0x02, 0x5e, 0x9c, 0x83, 0x44, 0x01, 0xf9, 0x66, 0x8e, 0xf0, 0x12, 0x09, 0x12,
	0xc6, 0x4d, 0x22, 0x36, 0x2a, 0x27, 0xb3, 0xa8, 0xdc, 0x1c, 0xf1, 0x65, 0x12, 0xd4, 0x39, 0xe4,
	0xea, 0x9d, 0x2c, 0x50, 0x57, 0x0e, 0x5e, 0x21, 0xe1, 0x5f, 0xc8, 0xb4, 0xea, 0xe6, 0x32, 0x73,
	0xf0, 0x2a, 0x61, 0x4b, 0xf4, 0xbe, 0x9e, 0x56, 0x08, 0xaf, 0xc5, 0xfa, 0x1c, 0x55, 0xcf, 0xf5,
	0xe7, 0x53, 0x5e, 0x27, 0x6c, 0x8d, 0x9e, 0x2a, 0x0d, 0x66, 0x5a, 0x09, 0x19, 0x11, 0xba, 0x5c,
	0xe6, 0x28, 0xe0, 0x0d, 0x12, 0x84, 0x29, 0xf9, 0x30, 0xd7, 0x5c, 0x78, 0xa7, 0xb5, 0xcf, 0xb9,
	0xe9, 0x21, 0xdc, 0x26, 0xe1, 0xf8, 0x95, 0x91, 0x75, 0x4e, 0xab, 0x1e, 0xbc, 0x49, 0xd8, 0x39,
	0xda, 0xaa, 0x94, 0xad, 0xca, 0x5a, 0x7a, 0x5f, 0xa0, 0x90, 0xdc, 0xbb, 0x61, 0x89, 0xf0, 0x16,
	0x61, 0xeb, 0xf4, 0x8c, 0x54, 0x0e, 0x8d, 0xe2, 0xb9, 0xb7, 0x68, 0x06, 0x68, 0x3c, 0x1a, 0xa3,
	0x0d, 0xfc, 0x19, 0x39, 0x85, 0xe5, 0x65, 0x51, 0xe6, 0x18, 0x4e, 0x8a, 0x02, 0xfe, 0x22, 0x47,
	0x4a, 0xf4, 0xb8, 0xc3, 0x2d, 0x3e, 0x84, 0xbf, 0x63, 0xdd, 0x61, 0x34, 0xdb, 0xf5, 0x1f, 0xc2,
	0xce, 0xd3, 0xf5, 0xbe, 0x73, 0xa5, 0x1f, 0xa0, 0xb1, 0x81, 0x7b, 0x18, 0x35, 0x63, 0x01, 0xff,
	0x12, 0x76, 0x3f, 0x3d, 0x3b, 0xe0, 0x46, 0x72, 0x15, 0x2e, 0x6e, 0xb5, 0x57, 0xd8, 0xd3, 0x4e,
	0x72, 0x87, 0x16, 0xfe, 0x23, 0xed, 0xe3, 0x8d, 0x27, 0xe1, 0x8b, 0xa4, 0xbd, 0xd0, 0xf8, 0x29,
	0x81, 0x5f, 0xc2, 0xf7, 0xb7, 0x04, 0xde, 0x4e, 0xdb, 0x0b, 0x8d, 0x3b, 0x29, 0xdc, 0x09, 0xdf,
	0x4f, 0x52, 0x78, 0x9a, 0x5c, 0x3a, 0xa0, 0xad, 0xda, 0x60, 0xfc, 0xd5, 0xe0, 0x14, 0x73, 0x27,
	0x61, 0x0f, 0x75, 0x6a, 0x9b, 0xe9, 0x1c, 0xd9, 0x4c, 0x07, 0x6f, 0x4e, 0x9f, 0x1a, 0x5c, 0xb9,
	0x31, 0x1d, 0xe9, 0xe8, 0x14, 0x93, 0xb5, 0x9f, 0x3f, 0xff, 0x9d, 0x6c, 0x24, 0x17, 0x96, 0x1f,
	0x39, 0xd7, 0x39, 0x18, 0x6d, 0x77, 0xee, 0x6d, 0x39, 0xe6, 0x74, 0x0d, 0x10, 0xd2, 0xf3, 0xec,
	0xf6, 0x42, 0x1c, 0xfb, 0xe8, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xa5, 0x1a, 0x66, 0xe0,
	0x04, 0x00, 0x00,
}
