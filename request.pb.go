// Code generated by protoc-gen-go. DO NOT EDIT.
// source: request.proto

package web

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Method int32

const (
	Method_UNUSED_METHOD Method = 0
	Method_GET           Method = 1
	Method_HEAD          Method = 2
	Method_POST          Method = 3
	Method_PUT           Method = 4
	Method_DELETE        Method = 5
	Method_CONNECT       Method = 6
	Method_OPTIONS       Method = 7
	Method_TRACE         Method = 8
)

var Method_name = map[int32]string{
	0: "UNUSED_METHOD",
	1: "GET",
	2: "HEAD",
	3: "POST",
	4: "PUT",
	5: "DELETE",
	6: "CONNECT",
	7: "OPTIONS",
	8: "TRACE",
}

var Method_value = map[string]int32{
	"UNUSED_METHOD": 0,
	"GET":           1,
	"HEAD":          2,
	"POST":          3,
	"PUT":           4,
	"DELETE":        5,
	"CONNECT":       6,
	"OPTIONS":       7,
	"TRACE":         8,
}

func (x Method) String() string {
	return proto.EnumName(Method_name, int32(x))
}

func (Method) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{0}
}

type RequestHeaders_TransferEncodingsValue int32

const (
	RequestHeaders_UNUSED_TRANSFER_ENCODINGS_VALUE RequestHeaders_TransferEncodingsValue = 0
	RequestHeaders_TRAILERS                        RequestHeaders_TransferEncodingsValue = 1
)

var RequestHeaders_TransferEncodingsValue_name = map[int32]string{
	0: "UNUSED_TRANSFER_ENCODINGS_VALUE",
	1: "TRAILERS",
}

var RequestHeaders_TransferEncodingsValue_value = map[string]int32{
	"UNUSED_TRANSFER_ENCODINGS_VALUE": 0,
	"TRAILERS":                        1,
}

func (x RequestHeaders_TransferEncodingsValue) String() string {
	return proto.EnumName(RequestHeaders_TransferEncodingsValue_name, int32(x))
}

func (RequestHeaders_TransferEncodingsValue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{0, 0}
}

type RequestHeaders_XRequestedWithValue int32

const (
	RequestHeaders_UNUSED_X_REQUESTED_WITH_VALUE RequestHeaders_XRequestedWithValue = 0
	RequestHeaders_XMLHTTPREQUEST                RequestHeaders_XRequestedWithValue = 1
)

var RequestHeaders_XRequestedWithValue_name = map[int32]string{
	0: "UNUSED_X_REQUESTED_WITH_VALUE",
	1: "XMLHTTPREQUEST",
}

var RequestHeaders_XRequestedWithValue_value = map[string]int32{
	"UNUSED_X_REQUESTED_WITH_VALUE": 0,
	"XMLHTTPREQUEST":                1,
}

func (x RequestHeaders_XRequestedWithValue) String() string {
	return proto.EnumName(RequestHeaders_XRequestedWithValue_name, int32(x))
}

func (RequestHeaders_XRequestedWithValue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{0, 1}
}

type RequestHeaders_DNTValue int32

const (
	RequestHeaders_UNUSED_DNT_VALUE RequestHeaders_DNTValue = 0
	RequestHeaders_DISABLED         RequestHeaders_DNTValue = 1
	RequestHeaders_ENABLED          RequestHeaders_DNTValue = 2
)

var RequestHeaders_DNTValue_name = map[int32]string{
	0: "UNUSED_DNT_VALUE",
	1: "DISABLED",
	2: "ENABLED",
}

var RequestHeaders_DNTValue_value = map[string]int32{
	"UNUSED_DNT_VALUE": 0,
	"DISABLED":         1,
	"ENABLED":          2,
}

func (x RequestHeaders_DNTValue) String() string {
	return proto.EnumName(RequestHeaders_DNTValue_name, int32(x))
}

func (RequestHeaders_DNTValue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{0, 2}
}

type RequestHeaders struct {
	Accept                     *RequestHeaders_AcceptHeaders `protobuf:"bytes,1,opt,name=accept,proto3" json:"accept,omitempty"`
	AcceptLanguage             string                        `protobuf:"bytes,5,opt,name=accept_language,json=acceptLanguage,proto3" json:"accept_language,omitempty"`
	AccessControlRequestMethod Method                        `protobuf:"varint,6,opt,name=access_control_request_method,json=accessControlRequestMethod,proto3,enum=web.Method" json:"access_control_request_method,omitempty"`
	// TODO: headers here are just names, no values
	AccessControlRequestHeaders *RequestHeaders      `protobuf:"bytes,7,opt,name=access_control_request_headers,json=accessControlRequestHeaders,proto3" json:"access_control_request_headers,omitempty"`
	Authorization               string               `protobuf:"bytes,8,opt,name=authorization,proto3" json:"authorization,omitempty"`
	CacheControl                *CacheControlRequest `protobuf:"bytes,32,opt,name=cache_control,json=cacheControl,proto3" json:"cache_control,omitempty"`
	Expect                      string               `protobuf:"bytes,9,opt,name=expect,proto3" json:"expect,omitempty"`
	Forwarded                   []*KeyValue          `protobuf:"bytes,10,rep,name=forwarded,proto3" json:"forwarded,omitempty"`
	From                        string               `protobuf:"bytes,11,opt,name=from,proto3" json:"from,omitempty"`
	Host                        string               `protobuf:"bytes,12,opt,name=host,proto3" json:"host,omitempty"`
	Http2Settings               string               `protobuf:"bytes,13,opt,name=http2_settings,json=http2Settings,proto3" json:"http2_settings,omitempty"`
	IfMatch                     string               `protobuf:"bytes,14,opt,name=if_match,json=ifMatch,proto3" json:"if_match,omitempty"`
	IfModifiedSince             *timestamp.Timestamp `protobuf:"bytes,15,opt,name=if_modified_since,json=ifModifiedSince,proto3" json:"if_modified_since,omitempty"`
	IfNoneMatch                 []string             `protobuf:"bytes,16,rep,name=if_none_match,json=ifNoneMatch,proto3" json:"if_none_match,omitempty"`
	IfRange                     string               `protobuf:"bytes,17,opt,name=if_range,json=ifRange,proto3" json:"if_range,omitempty"`
	IfUnmodifiedSince           *timestamp.Timestamp `protobuf:"bytes,18,opt,name=if_unmodified_since,json=ifUnmodifiedSince,proto3" json:"if_unmodified_since,omitempty"`
	MaxForwards                 uint64               `protobuf:"varint,19,opt,name=max_forwards,json=maxForwards,proto3" json:"max_forwards,omitempty"`
	Origin                      string               `protobuf:"bytes,20,opt,name=origin,proto3" json:"origin,omitempty"`
	Pragma                      string               `protobuf:"bytes,21,opt,name=pragma,proto3" json:"pragma,omitempty"`
	ProxyAuthorization          string               `protobuf:"bytes,22,opt,name=proxy_authorization,json=proxyAuthorization,proto3" json:"proxy_authorization,omitempty"`
	// Types that are valid to be assigned to Range:
	//	*RequestHeaders_Bytes
	Range                isRequestHeaders_Range                  `protobuf_oneof:"Range"`
	Referer              string                                  `protobuf:"bytes,24,opt,name=referer,proto3" json:"referer,omitempty"`
	Te                   []RequestHeaders_TransferEncodingsValue `protobuf:"varint,25,rep,packed,name=te,proto3,enum=web.RequestHeaders_TransferEncodingsValue" json:"te,omitempty"`
	UserAgent            string                                  `protobuf:"bytes,26,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Via                  []string                                `protobuf:"bytes,27,rep,name=via,proto3" json:"via,omitempty"`
	Warning              string                                  `protobuf:"bytes,28,opt,name=warning,proto3" json:"warning,omitempty"`
	XRequestedWith       RequestHeaders_XRequestedWithValue      `protobuf:"varint,29,opt,name=x_requested_with,json=xRequestedWith,proto3,enum=web.RequestHeaders_XRequestedWithValue" json:"x_requested_with,omitempty"`
	Dnt                  RequestHeaders_DNTValue                 `protobuf:"varint,30,opt,name=dnt,proto3,enum=web.RequestHeaders_DNTValue" json:"dnt,omitempty"`
	Other                []*KeyValue                             `protobuf:"bytes,31,rep,name=other,proto3" json:"other,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *RequestHeaders) Reset()         { *m = RequestHeaders{} }
func (m *RequestHeaders) String() string { return proto.CompactTextString(m) }
func (*RequestHeaders) ProtoMessage()    {}
func (*RequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{0}
}

func (m *RequestHeaders) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestHeaders.Unmarshal(m, b)
}
func (m *RequestHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestHeaders.Marshal(b, m, deterministic)
}
func (m *RequestHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHeaders.Merge(m, src)
}
func (m *RequestHeaders) XXX_Size() int {
	return xxx_messageInfo_RequestHeaders.Size(m)
}
func (m *RequestHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHeaders proto.InternalMessageInfo

func (m *RequestHeaders) GetAccept() *RequestHeaders_AcceptHeaders {
	if m != nil {
		return m.Accept
	}
	return nil
}

func (m *RequestHeaders) GetAcceptLanguage() string {
	if m != nil {
		return m.AcceptLanguage
	}
	return ""
}

func (m *RequestHeaders) GetAccessControlRequestMethod() Method {
	if m != nil {
		return m.AccessControlRequestMethod
	}
	return Method_UNUSED_METHOD
}

func (m *RequestHeaders) GetAccessControlRequestHeaders() *RequestHeaders {
	if m != nil {
		return m.AccessControlRequestHeaders
	}
	return nil
}

func (m *RequestHeaders) GetAuthorization() string {
	if m != nil {
		return m.Authorization
	}
	return ""
}

func (m *RequestHeaders) GetCacheControl() *CacheControlRequest {
	if m != nil {
		return m.CacheControl
	}
	return nil
}

func (m *RequestHeaders) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *RequestHeaders) GetForwarded() []*KeyValue {
	if m != nil {
		return m.Forwarded
	}
	return nil
}

func (m *RequestHeaders) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RequestHeaders) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *RequestHeaders) GetHttp2Settings() string {
	if m != nil {
		return m.Http2Settings
	}
	return ""
}

func (m *RequestHeaders) GetIfMatch() string {
	if m != nil {
		return m.IfMatch
	}
	return ""
}

func (m *RequestHeaders) GetIfModifiedSince() *timestamp.Timestamp {
	if m != nil {
		return m.IfModifiedSince
	}
	return nil
}

func (m *RequestHeaders) GetIfNoneMatch() []string {
	if m != nil {
		return m.IfNoneMatch
	}
	return nil
}

func (m *RequestHeaders) GetIfRange() string {
	if m != nil {
		return m.IfRange
	}
	return ""
}

func (m *RequestHeaders) GetIfUnmodifiedSince() *timestamp.Timestamp {
	if m != nil {
		return m.IfUnmodifiedSince
	}
	return nil
}

func (m *RequestHeaders) GetMaxForwards() uint64 {
	if m != nil {
		return m.MaxForwards
	}
	return 0
}

func (m *RequestHeaders) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *RequestHeaders) GetPragma() string {
	if m != nil {
		return m.Pragma
	}
	return ""
}

func (m *RequestHeaders) GetProxyAuthorization() string {
	if m != nil {
		return m.ProxyAuthorization
	}
	return ""
}

type isRequestHeaders_Range interface {
	isRequestHeaders_Range()
}

type RequestHeaders_Bytes struct {
	Bytes *RequestHeaders_ByteRange `protobuf:"bytes,23,opt,name=bytes,proto3,oneof"`
}

func (*RequestHeaders_Bytes) isRequestHeaders_Range() {}

func (m *RequestHeaders) GetRange() isRequestHeaders_Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *RequestHeaders) GetBytes() *RequestHeaders_ByteRange {
	if x, ok := m.GetRange().(*RequestHeaders_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (m *RequestHeaders) GetReferer() string {
	if m != nil {
		return m.Referer
	}
	return ""
}

func (m *RequestHeaders) GetTe() []RequestHeaders_TransferEncodingsValue {
	if m != nil {
		return m.Te
	}
	return nil
}

func (m *RequestHeaders) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *RequestHeaders) GetVia() []string {
	if m != nil {
		return m.Via
	}
	return nil
}

func (m *RequestHeaders) GetWarning() string {
	if m != nil {
		return m.Warning
	}
	return ""
}

func (m *RequestHeaders) GetXRequestedWith() RequestHeaders_XRequestedWithValue {
	if m != nil {
		return m.XRequestedWith
	}
	return RequestHeaders_UNUSED_X_REQUESTED_WITH_VALUE
}

func (m *RequestHeaders) GetDnt() RequestHeaders_DNTValue {
	if m != nil {
		return m.Dnt
	}
	return RequestHeaders_UNUSED_DNT_VALUE
}

func (m *RequestHeaders) GetOther() []*KeyValue {
	if m != nil {
		return m.Other
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestHeaders) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestHeaders_Bytes)(nil),
	}
}

type RequestHeaders_AcceptHeaders struct {
	ContentTypes         []*RequestHeaders_AcceptHeaders_ContentType `protobuf:"bytes,1,rep,name=content_types,json=contentTypes,proto3" json:"content_types,omitempty"`
	Encoding             []*RequestHeaders_AcceptHeaders_Encoding    `protobuf:"bytes,2,rep,name=encoding,proto3" json:"encoding,omitempty"`
	Datetime             *timestamp.Timestamp                        `protobuf:"bytes,3,opt,name=datetime,proto3" json:"datetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *RequestHeaders_AcceptHeaders) Reset()         { *m = RequestHeaders_AcceptHeaders{} }
func (m *RequestHeaders_AcceptHeaders) String() string { return proto.CompactTextString(m) }
func (*RequestHeaders_AcceptHeaders) ProtoMessage()    {}
func (*RequestHeaders_AcceptHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{0, 0}
}

func (m *RequestHeaders_AcceptHeaders) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestHeaders_AcceptHeaders.Unmarshal(m, b)
}
func (m *RequestHeaders_AcceptHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestHeaders_AcceptHeaders.Marshal(b, m, deterministic)
}
func (m *RequestHeaders_AcceptHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHeaders_AcceptHeaders.Merge(m, src)
}
func (m *RequestHeaders_AcceptHeaders) XXX_Size() int {
	return xxx_messageInfo_RequestHeaders_AcceptHeaders.Size(m)
}
func (m *RequestHeaders_AcceptHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHeaders_AcceptHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHeaders_AcceptHeaders proto.InternalMessageInfo

func (m *RequestHeaders_AcceptHeaders) GetContentTypes() []*RequestHeaders_AcceptHeaders_ContentType {
	if m != nil {
		return m.ContentTypes
	}
	return nil
}

func (m *RequestHeaders_AcceptHeaders) GetEncoding() []*RequestHeaders_AcceptHeaders_Encoding {
	if m != nil {
		return m.Encoding
	}
	return nil
}

func (m *RequestHeaders_AcceptHeaders) GetDatetime() *timestamp.Timestamp {
	if m != nil {
		return m.Datetime
	}
	return nil
}

type RequestHeaders_AcceptHeaders_ContentType struct {
	// Types that are valid to be assigned to ContentType:
	//	*RequestHeaders_AcceptHeaders_ContentType_Type
	//	*RequestHeaders_AcceptHeaders_ContentType_AllTypes
	ContentType          isRequestHeaders_AcceptHeaders_ContentType_ContentType `protobuf_oneof:"content_type"`
	Q                    float32                                                `protobuf:"fixed32,3,opt,name=q,proto3" json:"q,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *RequestHeaders_AcceptHeaders_ContentType) Reset() {
	*m = RequestHeaders_AcceptHeaders_ContentType{}
}
func (m *RequestHeaders_AcceptHeaders_ContentType) String() string { return proto.CompactTextString(m) }
func (*RequestHeaders_AcceptHeaders_ContentType) ProtoMessage()    {}
func (*RequestHeaders_AcceptHeaders_ContentType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{0, 0, 0}
}

func (m *RequestHeaders_AcceptHeaders_ContentType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestHeaders_AcceptHeaders_ContentType.Unmarshal(m, b)
}
func (m *RequestHeaders_AcceptHeaders_ContentType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestHeaders_AcceptHeaders_ContentType.Marshal(b, m, deterministic)
}
func (m *RequestHeaders_AcceptHeaders_ContentType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHeaders_AcceptHeaders_ContentType.Merge(m, src)
}
func (m *RequestHeaders_AcceptHeaders_ContentType) XXX_Size() int {
	return xxx_messageInfo_RequestHeaders_AcceptHeaders_ContentType.Size(m)
}
func (m *RequestHeaders_AcceptHeaders_ContentType) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHeaders_AcceptHeaders_ContentType.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHeaders_AcceptHeaders_ContentType proto.InternalMessageInfo

type isRequestHeaders_AcceptHeaders_ContentType_ContentType interface {
	isRequestHeaders_AcceptHeaders_ContentType_ContentType()
}

type RequestHeaders_AcceptHeaders_ContentType_Type struct {
	Type *MIMEType `protobuf:"bytes,1,opt,name=type,proto3,oneof"`
}

type RequestHeaders_AcceptHeaders_ContentType_AllTypes struct {
	AllTypes bool `protobuf:"varint,2,opt,name=all_types,json=allTypes,proto3,oneof"`
}

func (*RequestHeaders_AcceptHeaders_ContentType_Type) isRequestHeaders_AcceptHeaders_ContentType_ContentType() {
}

func (*RequestHeaders_AcceptHeaders_ContentType_AllTypes) isRequestHeaders_AcceptHeaders_ContentType_ContentType() {
}

func (m *RequestHeaders_AcceptHeaders_ContentType) GetContentType() isRequestHeaders_AcceptHeaders_ContentType_ContentType {
	if m != nil {
		return m.ContentType
	}
	return nil
}

func (m *RequestHeaders_AcceptHeaders_ContentType) GetType() *MIMEType {
	if x, ok := m.GetContentType().(*RequestHeaders_AcceptHeaders_ContentType_Type); ok {
		return x.Type
	}
	return nil
}

func (m *RequestHeaders_AcceptHeaders_ContentType) GetAllTypes() bool {
	if x, ok := m.GetContentType().(*RequestHeaders_AcceptHeaders_ContentType_AllTypes); ok {
		return x.AllTypes
	}
	return false
}

func (m *RequestHeaders_AcceptHeaders_ContentType) GetQ() float32 {
	if m != nil {
		return m.Q
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestHeaders_AcceptHeaders_ContentType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestHeaders_AcceptHeaders_ContentType_Type)(nil),
		(*RequestHeaders_AcceptHeaders_ContentType_AllTypes)(nil),
	}
}

type RequestHeaders_AcceptHeaders_Encoding struct {
	// Types that are valid to be assigned to Encoding:
	//	*RequestHeaders_AcceptHeaders_Encoding_Value
	//	*RequestHeaders_AcceptHeaders_Encoding_Wildcard
	Encoding             isRequestHeaders_AcceptHeaders_Encoding_Encoding `protobuf_oneof:"encoding"`
	Q                    float32                                          `protobuf:"fixed32,3,opt,name=q,proto3" json:"q,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *RequestHeaders_AcceptHeaders_Encoding) Reset()         { *m = RequestHeaders_AcceptHeaders_Encoding{} }
func (m *RequestHeaders_AcceptHeaders_Encoding) String() string { return proto.CompactTextString(m) }
func (*RequestHeaders_AcceptHeaders_Encoding) ProtoMessage()    {}
func (*RequestHeaders_AcceptHeaders_Encoding) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{0, 0, 1}
}

func (m *RequestHeaders_AcceptHeaders_Encoding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestHeaders_AcceptHeaders_Encoding.Unmarshal(m, b)
}
func (m *RequestHeaders_AcceptHeaders_Encoding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestHeaders_AcceptHeaders_Encoding.Marshal(b, m, deterministic)
}
func (m *RequestHeaders_AcceptHeaders_Encoding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHeaders_AcceptHeaders_Encoding.Merge(m, src)
}
func (m *RequestHeaders_AcceptHeaders_Encoding) XXX_Size() int {
	return xxx_messageInfo_RequestHeaders_AcceptHeaders_Encoding.Size(m)
}
func (m *RequestHeaders_AcceptHeaders_Encoding) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHeaders_AcceptHeaders_Encoding.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHeaders_AcceptHeaders_Encoding proto.InternalMessageInfo

type isRequestHeaders_AcceptHeaders_Encoding_Encoding interface {
	isRequestHeaders_AcceptHeaders_Encoding_Encoding()
}

type RequestHeaders_AcceptHeaders_Encoding_Value struct {
	Value Encodings `protobuf:"varint,1,opt,name=value,proto3,enum=web.Encodings,oneof"`
}

type RequestHeaders_AcceptHeaders_Encoding_Wildcard struct {
	Wildcard bool `protobuf:"varint,2,opt,name=wildcard,proto3,oneof"`
}

func (*RequestHeaders_AcceptHeaders_Encoding_Value) isRequestHeaders_AcceptHeaders_Encoding_Encoding() {
}

func (*RequestHeaders_AcceptHeaders_Encoding_Wildcard) isRequestHeaders_AcceptHeaders_Encoding_Encoding() {
}

func (m *RequestHeaders_AcceptHeaders_Encoding) GetEncoding() isRequestHeaders_AcceptHeaders_Encoding_Encoding {
	if m != nil {
		return m.Encoding
	}
	return nil
}

func (m *RequestHeaders_AcceptHeaders_Encoding) GetValue() Encodings {
	if x, ok := m.GetEncoding().(*RequestHeaders_AcceptHeaders_Encoding_Value); ok {
		return x.Value
	}
	return Encodings_ENCODINGS_UNSPECIFIED
}

func (m *RequestHeaders_AcceptHeaders_Encoding) GetWildcard() bool {
	if x, ok := m.GetEncoding().(*RequestHeaders_AcceptHeaders_Encoding_Wildcard); ok {
		return x.Wildcard
	}
	return false
}

func (m *RequestHeaders_AcceptHeaders_Encoding) GetQ() float32 {
	if m != nil {
		return m.Q
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestHeaders_AcceptHeaders_Encoding) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestHeaders_AcceptHeaders_Encoding_Value)(nil),
		(*RequestHeaders_AcceptHeaders_Encoding_Wildcard)(nil),
	}
}

type RequestHeaders_ByteRange struct {
	Start                uint64   `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  uint64   `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestHeaders_ByteRange) Reset()         { *m = RequestHeaders_ByteRange{} }
func (m *RequestHeaders_ByteRange) String() string { return proto.CompactTextString(m) }
func (*RequestHeaders_ByteRange) ProtoMessage()    {}
func (*RequestHeaders_ByteRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{0, 1}
}

func (m *RequestHeaders_ByteRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestHeaders_ByteRange.Unmarshal(m, b)
}
func (m *RequestHeaders_ByteRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestHeaders_ByteRange.Marshal(b, m, deterministic)
}
func (m *RequestHeaders_ByteRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHeaders_ByteRange.Merge(m, src)
}
func (m *RequestHeaders_ByteRange) XXX_Size() int {
	return xxx_messageInfo_RequestHeaders_ByteRange.Size(m)
}
func (m *RequestHeaders_ByteRange) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHeaders_ByteRange.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHeaders_ByteRange proto.InternalMessageInfo

func (m *RequestHeaders_ByteRange) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *RequestHeaders_ByteRange) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

type Request struct {
	Method Method `protobuf:"varint,1,opt,name=method,proto3,enum=web.Method" json:"method,omitempty"`
	// Types that are valid to be assigned to URI:
	//	*Request_UriString
	//	*Request_Wildcard
	URI                  isRequest_URI   `protobuf_oneof:"URI"`
	Query                []*KeyValue     `protobuf:"bytes,4,rep,name=query,proto3" json:"query,omitempty"`
	Header               *RequestHeaders `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{1}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetMethod() Method {
	if m != nil {
		return m.Method
	}
	return Method_UNUSED_METHOD
}

type isRequest_URI interface {
	isRequest_URI()
}

type Request_UriString struct {
	UriString string `protobuf:"bytes,2,opt,name=uri_string,json=uriString,proto3,oneof"`
}

type Request_Wildcard struct {
	Wildcard bool `protobuf:"varint,3,opt,name=wildcard,proto3,oneof"`
}

func (*Request_UriString) isRequest_URI() {}

func (*Request_Wildcard) isRequest_URI() {}

func (m *Request) GetURI() isRequest_URI {
	if m != nil {
		return m.URI
	}
	return nil
}

func (m *Request) GetUriString() string {
	if x, ok := m.GetURI().(*Request_UriString); ok {
		return x.UriString
	}
	return ""
}

func (m *Request) GetWildcard() bool {
	if x, ok := m.GetURI().(*Request_Wildcard); ok {
		return x.Wildcard
	}
	return false
}

func (m *Request) GetQuery() []*KeyValue {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *Request) GetHeader() *RequestHeaders {
	if m != nil {
		return m.Header
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Request) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Request_UriString)(nil),
		(*Request_Wildcard)(nil),
	}
}

func init() {
	proto.RegisterEnum("web.Method", Method_name, Method_value)
	proto.RegisterEnum("web.RequestHeaders_TransferEncodingsValue", RequestHeaders_TransferEncodingsValue_name, RequestHeaders_TransferEncodingsValue_value)
	proto.RegisterEnum("web.RequestHeaders_XRequestedWithValue", RequestHeaders_XRequestedWithValue_name, RequestHeaders_XRequestedWithValue_value)
	proto.RegisterEnum("web.RequestHeaders_DNTValue", RequestHeaders_DNTValue_name, RequestHeaders_DNTValue_value)
	proto.RegisterType((*RequestHeaders)(nil), "web.RequestHeaders")
	proto.RegisterType((*RequestHeaders_AcceptHeaders)(nil), "web.RequestHeaders.AcceptHeaders")
	proto.RegisterType((*RequestHeaders_AcceptHeaders_ContentType)(nil), "web.RequestHeaders.AcceptHeaders.ContentType")
	proto.RegisterType((*RequestHeaders_AcceptHeaders_Encoding)(nil), "web.RequestHeaders.AcceptHeaders.Encoding")
	proto.RegisterType((*RequestHeaders_ByteRange)(nil), "web.RequestHeaders.ByteRange")
	proto.RegisterType((*Request)(nil), "web.Request")
}

func init() { proto.RegisterFile("request.proto", fileDescriptor_7f73548e33e655fe) }

var fileDescriptor_7f73548e33e655fe = []byte{
	// 1240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xdb, 0x72, 0x1a, 0x47,
	0x13, 0xd6, 0x8a, 0x73, 0x73, 0xd0, 0x6a, 0xe4, 0x5f, 0xff, 0x18, 0x5b, 0x16, 0x96, 0x92, 0x98,
	0xb2, 0xcb, 0xb8, 0x4a, 0xae, 0x5c, 0x24, 0xa9, 0x5c, 0x70, 0x58, 0x1b, 0x62, 0x40, 0xf2, 0xb0,
	0xd8, 0xba, 0xca, 0xd6, 0x0a, 0x66, 0x61, 0x53, 0xb0, 0x8b, 0x66, 0x07, 0x4b, 0xe4, 0x6d, 0xf2,
	0x18, 0x79, 0x81, 0x3c, 0x48, 0xae, 0xf2, 0x16, 0x49, 0xcd, 0x61, 0x25, 0x61, 0xe3, 0xd2, 0xdd,
	0xf4, 0xd7, 0xdd, 0x5f, 0x1f, 0xa6, 0x7b, 0x67, 0xa1, 0xc8, 0xe8, 0xe5, 0x92, 0x46, 0xbc, 0xb6,
	0x60, 0x21, 0x0f, 0x51, 0xe2, 0x8a, 0x5e, 0x94, 0x4b, 0x34, 0x18, 0x85, 0x63, 0x3f, 0x98, 0x28,
	0xb0, 0x7c, 0x38, 0x09, 0xc3, 0xc9, 0x8c, 0xbe, 0x92, 0xd2, 0xc5, 0xd2, 0x7b, 0xc5, 0xfd, 0x39,
	0x8d, 0xb8, 0x3b, 0x5f, 0x68, 0x83, 0xe2, 0x94, 0xba, 0x63, 0xca, 0x22, 0x2d, 0xc2, 0xdc, 0x9f,
	0xd3, 0xf8, 0xbc, 0xe4, 0xfe, 0x4c, 0x9d, 0x8f, 0xfe, 0x30, 0xa1, 0x44, 0x54, 0xb8, 0xb6, 0x72,
	0x40, 0x3f, 0x40, 0xda, 0x1d, 0x8d, 0xe8, 0x82, 0x63, 0xa3, 0x62, 0x54, 0xf3, 0x27, 0x4f, 0x6b,
	0x57, 0xf4, 0xa2, 0xb6, 0x6e, 0x54, 0xab, 0x4b, 0x0b, 0x2d, 0x11, 0xed, 0x80, 0x9e, 0xc1, 0x8e,
	0x3a, 0x39, 0x33, 0x37, 0x98, 0x2c, 0xdd, 0x09, 0xc5, 0xa9, 0x8a, 0x51, 0xcd, 0x91, 0x92, 0x82,
	0xbb, 0x1a, 0x45, 0x7d, 0x38, 0x10, 0x48, 0x14, 0x39, 0xa3, 0x30, 0xe0, 0x2c, 0x9c, 0x39, 0xba,
	0x66, 0x67, 0x4e, 0xf9, 0x34, 0x1c, 0xe3, 0x74, 0xc5, 0xa8, 0x96, 0x4e, 0xf2, 0x32, 0x74, 0x4f,
	0x42, 0xa4, 0xac, 0x3c, 0x9a, 0xca, 0x41, 0xe7, 0xa3, 0x74, 0xe8, 0x1c, 0x9e, 0x7c, 0x85, 0x4f,
	0xb7, 0x01, 0x67, 0x64, 0x2d, 0x7b, 0x1b, 0x6a, 0x21, 0x8f, 0x36, 0x11, 0xc7, 0xdd, 0xf8, 0x06,
	0x8a, 0xee, 0x92, 0x4f, 0x43, 0xe6, 0xff, 0xee, 0x72, 0x3f, 0x0c, 0x70, 0x56, 0x16, 0xb4, 0x0e,
	0xa2, 0x9f, 0xa1, 0x38, 0x72, 0x47, 0x53, 0x1a, 0x87, 0xc7, 0x15, 0x19, 0x0e, 0xcb, 0x70, 0x4d,
	0xa1, 0x59, 0x67, 0x27, 0x85, 0xd1, 0x1d, 0x10, 0xed, 0x43, 0x9a, 0x5e, 0x2f, 0xe8, 0x88, 0xe3,
	0x9c, 0x64, 0xd7, 0x12, 0x7a, 0x01, 0x39, 0x2f, 0x64, 0x57, 0x2e, 0x1b, 0xd3, 0x31, 0x86, 0x4a,
	0xa2, 0x9a, 0x3f, 0x29, 0x4a, 0xca, 0x77, 0x74, 0xf5, 0xc1, 0x9d, 0x2d, 0x29, 0xb9, 0xd5, 0x23,
	0x04, 0x49, 0x8f, 0x85, 0x73, 0x9c, 0x97, 0x14, 0xf2, 0x2c, 0xb0, 0x69, 0x18, 0x71, 0x5c, 0x50,
	0x98, 0x38, 0xa3, 0x6f, 0xa1, 0x34, 0xe5, 0x7c, 0x71, 0xe2, 0x44, 0x94, 0x73, 0x3f, 0x98, 0x44,
	0xb8, 0xa8, 0x4a, 0x92, 0xe8, 0x40, 0x83, 0xe8, 0x21, 0x64, 0x7d, 0xcf, 0x99, 0xbb, 0x7c, 0x34,
	0xc5, 0x25, 0x69, 0x90, 0xf1, 0xbd, 0x9e, 0x10, 0xd1, 0x1b, 0xd8, 0x15, 0xaa, 0x70, 0xec, 0x7b,
	0x3e, 0x1d, 0x3b, 0x91, 0x1f, 0x8c, 0x28, 0xde, 0x91, 0x15, 0x97, 0x6b, 0x6a, 0x30, 0x6b, 0xf1,
	0x60, 0xd6, 0xec, 0x78, 0x30, 0xc9, 0x8e, 0xef, 0xf5, 0xb4, 0xcf, 0x40, 0xb8, 0xa0, 0x23, 0x28,
	0xfa, 0x9e, 0x13, 0x84, 0x01, 0xd5, 0x71, 0xcc, 0x4a, 0xa2, 0x9a, 0x23, 0x79, 0xdf, 0xeb, 0x87,
	0x01, 0x55, 0xb1, 0x54, 0x1a, 0xcc, 0x0d, 0x26, 0x14, 0xef, 0xc6, 0x69, 0x10, 0x21, 0xa2, 0x5f,
	0x60, 0xcf, 0xf7, 0x9c, 0x65, 0xf0, 0x59, 0x22, 0xe8, 0xde, 0x44, 0x76, 0x7d, 0x6f, 0x78, 0xe3,
	0xa5, 0x52, 0x79, 0x0a, 0x85, 0xb9, 0x7b, 0xed, 0xe8, 0x6e, 0x46, 0x78, 0xaf, 0x62, 0x54, 0x93,
	0x24, 0x3f, 0x77, 0xaf, 0xdf, 0x68, 0x48, 0x5c, 0x52, 0xc8, 0xfc, 0x89, 0x1f, 0xe0, 0x07, 0xea,
	0x92, 0x94, 0x24, 0xf0, 0x05, 0x73, 0x27, 0x73, 0x17, 0xff, 0x4f, 0xe1, 0x4a, 0x42, 0xaf, 0x60,
	0x6f, 0xc1, 0xc2, 0xeb, 0x95, 0xb3, 0x3e, 0x3f, 0xfb, 0xd2, 0x08, 0x49, 0x55, 0x7d, 0x6d, 0x88,
	0xbe, 0x87, 0xd4, 0xc5, 0x8a, 0xd3, 0x08, 0xff, 0x5f, 0x56, 0x70, 0xb0, 0x69, 0xef, 0x1a, 0x2b,
	0x4e, 0x65, 0xf5, 0xed, 0x2d, 0xa2, 0xac, 0x11, 0x86, 0x0c, 0xa3, 0x1e, 0x65, 0x94, 0x61, 0xac,
	0x1a, 0xa4, 0x45, 0xf4, 0x23, 0x6c, 0x73, 0x8a, 0x1f, 0x56, 0x12, 0xd5, 0xd2, 0xc9, 0xf3, 0x4d,
	0x6c, 0x36, 0x73, 0x83, 0xc8, 0xa3, 0xcc, 0xd2, 0x1f, 0x97, 0x48, 0x0d, 0xd5, 0x36, 0xa7, 0xe8,
	0x00, 0x60, 0x19, 0x51, 0xe6, 0xb8, 0x13, 0x1a, 0x70, 0x5c, 0x96, 0xc4, 0x39, 0x81, 0xd4, 0x05,
	0x80, 0x4c, 0x48, 0x7c, 0xf2, 0x5d, 0xfc, 0x48, 0x5e, 0x98, 0x38, 0x8a, 0x34, 0xae, 0x5c, 0x16,
	0xf8, 0xc1, 0x04, 0x3f, 0x56, 0x69, 0x68, 0x11, 0xbd, 0x07, 0xf3, 0x3a, 0xde, 0x47, 0x3a, 0x76,
	0xae, 0x7c, 0x3e, 0xc5, 0x07, 0x72, 0xbf, 0x9f, 0x6d, 0x4a, 0xea, 0x9c, 0xc4, 0xa6, 0x1f, 0x7d,
	0x3e, 0x55, 0x19, 0x95, 0xae, 0xd7, 0x40, 0x54, 0x83, 0xc4, 0x38, 0xe0, 0xf8, 0x89, 0x64, 0x79,
	0xbc, 0x89, 0xa5, 0xd5, 0xb7, 0x95, 0xab, 0x30, 0x44, 0xc7, 0x90, 0x0a, 0xf9, 0x94, 0x32, 0x7c,
	0xb8, 0x69, 0x89, 0x94, 0xae, 0xfc, 0x6f, 0x02, 0x8a, 0x6b, 0xdf, 0x35, 0xe4, 0x42, 0x51, 0x2c,
	0x34, 0x0d, 0xb8, 0xc3, 0x57, 0x0b, 0x1a, 0x61, 0x43, 0xba, 0xbf, 0xbc, 0xf7, 0x8b, 0x58, 0x6b,
	0x2a, 0x37, 0x7b, 0xb5, 0xa0, 0x8d, 0xe2, 0xdf, 0xff, 0xfc, 0xf9, 0x24, 0x0b, 0x69, 0x65, 0x41,
	0x0a, 0xa3, 0x5b, 0x5d, 0x84, 0x7e, 0x85, 0x6c, 0xfc, 0x69, 0xc7, 0xdb, 0x92, 0xfd, 0xf9, 0xfd,
	0xec, 0xf1, 0x7d, 0x35, 0xf6, 0x05, 0xf5, 0x2e, 0xec, 0x28, 0xf5, 0xcb, 0x18, 0x27, 0x37, 0x9c,
	0xa8, 0x0f, 0xd9, 0xb1, 0xcb, 0xa9, 0x78, 0x1e, 0x70, 0xe2, 0xbe, 0xcd, 0xf8, 0x9c, 0xaf, 0xa5,
	0x3d, 0xc9, 0x0d, 0x47, 0x39, 0x84, 0xfc, 0x9d, 0xda, 0xd0, 0x31, 0x24, 0x45, 0x67, 0xf4, 0x53,
	0xa1, 0xfa, 0xda, 0xeb, 0xf4, 0x2c, 0xa1, 0x6c, 0x6f, 0x11, 0xa9, 0x44, 0x07, 0x90, 0x73, 0x67,
	0x33, 0xdd, 0xc2, 0xed, 0x8a, 0x51, 0xcd, 0xb6, 0xb7, 0x48, 0xd6, 0x9d, 0xcd, 0x54, 0x0b, 0x0a,
	0x60, 0x5c, 0xca, 0xdc, 0xb6, 0x89, 0x71, 0xd9, 0x28, 0x41, 0xe1, 0x6e, 0xcf, 0xcb, 0xbf, 0x41,
	0x36, 0x2e, 0x0b, 0x7d, 0x07, 0xa9, 0x4f, 0xe2, 0xc6, 0x64, 0xb8, 0xd2, 0x49, 0x49, 0x86, 0xbb,
	0x19, 0x5e, 0xb1, 0x12, 0x52, 0x8d, 0x1e, 0x43, 0xf6, 0xca, 0x9f, 0x8d, 0x47, 0x2e, 0x1b, 0xdf,
	0xc6, 0x8b, 0x91, 0xcf, 0xe2, 0xc1, 0xed, 0x05, 0x94, 0x5f, 0x43, 0xee, 0x66, 0xc1, 0xd0, 0x03,
	0x48, 0x45, 0xdc, 0x65, 0xea, 0x19, 0x4c, 0x12, 0x25, 0x88, 0xc1, 0xa7, 0x81, 0x62, 0x4d, 0x12,
	0x71, 0x3c, 0x7a, 0x07, 0xfb, 0x9b, 0xf7, 0x08, 0x1d, 0xc3, 0xe1, 0xb0, 0x3f, 0x1c, 0x58, 0x2d,
	0xc7, 0x26, 0xf5, 0xfe, 0xe0, 0x8d, 0x45, 0x1c, 0xab, 0xdf, 0x3c, 0x6d, 0x75, 0xfa, 0x6f, 0x07,
	0xce, 0x87, 0x7a, 0x77, 0x68, 0x99, 0x5b, 0xa8, 0x00, 0x59, 0x9b, 0xd4, 0x3b, 0x5d, 0x8b, 0x0c,
	0x4c, 0xe3, 0xa8, 0x0b, 0x7b, 0x1b, 0xe6, 0x1f, 0x3d, 0x85, 0x03, 0xcd, 0x74, 0xee, 0x10, 0xeb,
	0xfd, 0xd0, 0x1a, 0xd8, 0x56, 0xcb, 0xf9, 0xd8, 0xb1, 0xdb, 0x37, 0x3c, 0x08, 0x4a, 0xe7, 0xbd,
	0x6e, 0xdb, 0xb6, 0xcf, 0xb4, 0x81, 0x69, 0x1c, 0xfd, 0x04, 0xd9, 0x78, 0x0f, 0xd0, 0x03, 0x30,
	0x35, 0x45, 0xab, 0x6f, 0xdf, 0x8d, 0xde, 0xea, 0x0c, 0xea, 0x8d, 0xae, 0xd5, 0x32, 0x0d, 0x94,
	0x87, 0x8c, 0xd5, 0x57, 0xc2, 0x76, 0x23, 0x03, 0x29, 0xd9, 0x88, 0xa3, 0xbf, 0x0c, 0xc8, 0xe8,
	0x9c, 0xd0, 0x31, 0xa4, 0xf5, 0x0b, 0x6d, 0x7c, 0xf9, 0x42, 0x6b, 0x15, 0x3a, 0x04, 0x58, 0x32,
	0xdf, 0x89, 0x38, 0x53, 0x53, 0x6d, 0x54, 0x73, 0xed, 0x2d, 0x92, 0x5b, 0x32, 0x7f, 0x20, 0xa1,
	0xb5, 0xfb, 0x49, 0x7c, 0x71, 0x3f, 0xc7, 0x90, 0xba, 0x5c, 0x52, 0xb6, 0xc2, 0xc9, 0x8d, 0xcb,
	0x2a, 0x75, 0xe8, 0x05, 0xa4, 0xd5, 0xd3, 0x2e, 0xff, 0x30, 0xbe, 0xf2, 0xb2, 0x6b, 0x93, 0x46,
	0x0a, 0x12, 0x43, 0xd2, 0x79, 0xce, 0x20, 0xad, 0xff, 0x17, 0x76, 0xa1, 0xa8, 0x9b, 0xd1, 0xb3,
	0xec, 0xf6, 0x69, 0xcb, 0xdc, 0x42, 0x19, 0x48, 0xbc, 0xb5, 0x6c, 0xd3, 0x40, 0x59, 0x48, 0xb6,
	0xad, 0x7a, 0xcb, 0xdc, 0x16, 0xa7, 0xb3, 0xd3, 0x81, 0x6d, 0x26, 0x84, 0xf2, 0x6c, 0x68, 0x9b,
	0x49, 0x04, 0x90, 0x6e, 0x59, 0x5d, 0xcb, 0xb6, 0xcc, 0x94, 0xe8, 0x56, 0xf3, 0xb4, 0xdf, 0xb7,
	0x9a, 0xb6, 0x99, 0x16, 0xc2, 0xe9, 0x99, 0xdd, 0x39, 0xed, 0x0f, 0xcc, 0x0c, 0xca, 0x41, 0xca,
	0x26, 0xf5, 0xa6, 0x65, 0x66, 0x2f, 0xd2, 0x72, 0xcb, 0x5e, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff,
	0xaa, 0x5b, 0x71, 0x07, 0xd5, 0x09, 0x00, 0x00,
}
