// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mime.proto

package web

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MIME_Types int32

const (
	MIME_Types_MIME_TYPE_UNUSED MIME_Types = 0
	// Common MIME types: tag numbers 1-127 are reserved for the most common MIME
	// types to allow them to use one-byte varint encoding.
	MIME_Types_APPLICATION_JAVASCRIPT   MIME_Types = 5
	MIME_Types_APPLICATION_OCTET_STREAM MIME_Types = 4
	MIME_Types_APPLICATION_XML          MIME_Types = 6
	MIME_Types_APPLICATION_ZIP          MIME_Types = 7
	MIME_Types_TEXT_CSS                 MIME_Types = 3
	MIME_Types_TEXT_HTML                MIME_Types = 2
	MIME_Types_TEXT_PLAIN               MIME_Types = 1
	// Uncommon MIME types: all other MIME types start with tag numbers 128 and up.
	//
	// A new MIME type is added here first. If it gains lots of usage, it is aliased
	// into the common list above with the following steps:
	//
	//   1. Reserve a tag number above for the promoted MIME type. E.g.
	//           reserved 42; // for "APPLICATION_AWESOME_APP"
	//   2. Add a aliases option to the entry in the uncommon list. E.g.
	//           APPLICATION_AWESOME_APP = 7376 [(mime_descriptor).aliases=42];
	//   3. Wait for this definition version to propagate
	//   4. Add the type to the common list at the reserved tag number. E.g.
	//           APPLICATION_AWESOME_APP = 42;
	//
	// Some clients may know of the type only in the uncommon list, but can use the
	// aliases value to interpret unknown values in the common list until their
	// definitions are upgraded.
	//
	// Some very old clients may know of the type only in the uncommon list and may
	// also have no knowledge the type is eligible to be promoted. Clients that see
	// a MIME type with tag <128 and do not understand it should definitely update
	// themselves.
	MIME_Types_MIME_TYPE_UNUSED_UNCOMMON MIME_Types = 128
)

var MIME_Types_name = map[int32]string{
	0:   "MIME_TYPE_UNUSED",
	5:   "APPLICATION_JAVASCRIPT",
	4:   "APPLICATION_OCTET_STREAM",
	6:   "APPLICATION_XML",
	7:   "APPLICATION_ZIP",
	3:   "TEXT_CSS",
	2:   "TEXT_HTML",
	1:   "TEXT_PLAIN",
	128: "MIME_TYPE_UNUSED_UNCOMMON",
}

var MIME_Types_value = map[string]int32{
	"MIME_TYPE_UNUSED":          0,
	"APPLICATION_JAVASCRIPT":    5,
	"APPLICATION_OCTET_STREAM":  4,
	"APPLICATION_XML":           6,
	"APPLICATION_ZIP":           7,
	"TEXT_CSS":                  3,
	"TEXT_HTML":                 2,
	"TEXT_PLAIN":                1,
	"MIME_TYPE_UNUSED_UNCOMMON": 128,
}

func (x MIME_Types) String() string {
	return proto.EnumName(MIME_Types_name, int32(x))
}

func (MIME_Types) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1e03494e12603071, []int{0}
}

// HTTP_MIME_Type represents information about how a MIME type is represented
// on the wire in HTTP.
type MIME_Type_Descriptor struct {
	HttpString           string   `protobuf:"bytes,1,opt,name=http_string,json=httpString,proto3" json:"http_string,omitempty"`
	Aliases              []uint32 `protobuf:"varint,2,rep,packed,name=aliases,proto3" json:"aliases,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MIME_Type_Descriptor) Reset()         { *m = MIME_Type_Descriptor{} }
func (m *MIME_Type_Descriptor) String() string { return proto.CompactTextString(m) }
func (*MIME_Type_Descriptor) ProtoMessage()    {}
func (*MIME_Type_Descriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e03494e12603071, []int{0}
}

func (m *MIME_Type_Descriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MIME_Type_Descriptor.Unmarshal(m, b)
}
func (m *MIME_Type_Descriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MIME_Type_Descriptor.Marshal(b, m, deterministic)
}
func (m *MIME_Type_Descriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MIME_Type_Descriptor.Merge(m, src)
}
func (m *MIME_Type_Descriptor) XXX_Size() int {
	return xxx_messageInfo_MIME_Type_Descriptor.Size(m)
}
func (m *MIME_Type_Descriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MIME_Type_Descriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MIME_Type_Descriptor proto.InternalMessageInfo

func (m *MIME_Type_Descriptor) GetHttpString() string {
	if m != nil {
		return m.HttpString
	}
	return ""
}

func (m *MIME_Type_Descriptor) GetAliases() []uint32 {
	if m != nil {
		return m.Aliases
	}
	return nil
}

type MIME_Type struct {
	// Types that are valid to be assigned to MIME_Type:
	//	*MIME_Type_Type
	//	*MIME_Type_Other
	MIME_Type            isMIME_Type_MIME_Type `protobuf_oneof:"MIME_Type"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MIME_Type) Reset()         { *m = MIME_Type{} }
func (m *MIME_Type) String() string { return proto.CompactTextString(m) }
func (*MIME_Type) ProtoMessage()    {}
func (*MIME_Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e03494e12603071, []int{1}
}

func (m *MIME_Type) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MIME_Type.Unmarshal(m, b)
}
func (m *MIME_Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MIME_Type.Marshal(b, m, deterministic)
}
func (m *MIME_Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MIME_Type.Merge(m, src)
}
func (m *MIME_Type) XXX_Size() int {
	return xxx_messageInfo_MIME_Type.Size(m)
}
func (m *MIME_Type) XXX_DiscardUnknown() {
	xxx_messageInfo_MIME_Type.DiscardUnknown(m)
}

var xxx_messageInfo_MIME_Type proto.InternalMessageInfo

type isMIME_Type_MIME_Type interface {
	isMIME_Type_MIME_Type()
}

type MIME_Type_Type struct {
	Type MIME_Types `protobuf:"varint,1,opt,name=Type,proto3,enum=web.MIME_Types,oneof"`
}

type MIME_Type_Other struct {
	Other string `protobuf:"bytes,2,opt,name=Other,proto3,oneof"`
}

func (*MIME_Type_Type) isMIME_Type_MIME_Type() {}

func (*MIME_Type_Other) isMIME_Type_MIME_Type() {}

func (m *MIME_Type) GetMIME_Type() isMIME_Type_MIME_Type {
	if m != nil {
		return m.MIME_Type
	}
	return nil
}

func (m *MIME_Type) GetType() MIME_Types {
	if x, ok := m.GetMIME_Type().(*MIME_Type_Type); ok {
		return x.Type
	}
	return MIME_Types_MIME_TYPE_UNUSED
}

func (m *MIME_Type) GetOther() string {
	if x, ok := m.GetMIME_Type().(*MIME_Type_Other); ok {
		return x.Other
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MIME_Type) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MIME_Type_Type)(nil),
		(*MIME_Type_Other)(nil),
	}
}

var E_MimeDescriptor = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*MIME_Type_Descriptor)(nil),
	Field:         7987671,
	Name:          "web.mime_descriptor",
	Tag:           "bytes,7987671,opt,name=mime_descriptor",
	Filename:      "mime.proto",
}

func init() {
	proto.RegisterEnum("web.MIME_Types", MIME_Types_name, MIME_Types_value)
	proto.RegisterType((*MIME_Type_Descriptor)(nil), "web.MIME_Type_Descriptor")
	proto.RegisterType((*MIME_Type)(nil), "web.MIME_Type")
	proto.RegisterExtension(E_MimeDescriptor)
}

func init() { proto.RegisterFile("mime.proto", fileDescriptor_1e03494e12603071) }

var fileDescriptor_1e03494e12603071 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xdf, 0x8a, 0xd3, 0x5c,
	0x14, 0xc5, 0x9b, 0xa6, 0xd3, 0xa6, 0xbb, 0xdf, 0x37, 0x3d, 0x73, 0x90, 0x92, 0x09, 0xcc, 0xb4,
	0x53, 0x10, 0x8a, 0x62, 0x0a, 0xe3, 0x95, 0x82, 0x17, 0x31, 0x13, 0x68, 0xa4, 0xf9, 0x63, 0x92,
	0x8e, 0xa3, 0x37, 0x21, 0xad, 0xc7, 0x36, 0x92, 0x34, 0x21, 0x39, 0x75, 0x46, 0x6f, 0x46, 0x9f,
	0x43, 0x7c, 0x11, 0xf1, 0xce, 0x87, 0xf0, 0x11, 0x7c, 0x0c, 0xe5, 0x24, 0x4c, 0x1b, 0x87, 0xb9,
	0x0a, 0x7b, 0xaf, 0xdf, 0x5a, 0x61, 0x1f, 0x16, 0x40, 0x1c, 0xc6, 0x44, 0x4e, 0xb3, 0x84, 0x26,
	0x98, 0xbf, 0x24, 0x73, 0x69, 0xb0, 0x4c, 0x92, 0x65, 0x44, 0xc6, 0xc5, 0x6a, 0xbe, 0x79, 0x37,
	0x7e, 0x4b, 0xf2, 0x45, 0x16, 0xa6, 0x34, 0xc9, 0x4a, 0x6c, 0xf8, 0x12, 0xee, 0x19, 0xba, 0xa1,
	0xf9, 0xde, 0xc7, 0x94, 0xf8, 0x67, 0x5b, 0x15, 0xf7, 0xa1, 0xb3, 0xa2, 0x34, 0xf5, 0x73, 0x9a,
	0x85, 0xeb, 0xa5, 0xc8, 0x0d, 0xb8, 0x51, 0xdb, 0x01, 0xb6, 0x72, 0x8b, 0x0d, 0x16, 0xa1, 0x15,
	0x44, 0x61, 0x90, 0x93, 0x5c, 0xac, 0x0f, 0xf8, 0xd1, 0xff, 0xce, 0xcd, 0x38, 0x7c, 0x05, 0xed,
	0x6d, 0x24, 0xbe, 0x0f, 0x0d, 0xf6, 0x2d, 0x02, 0xf6, 0x4f, 0xbb, 0xf2, 0x25, 0x99, 0xcb, 0x5b,
	0x35, 0x9f, 0xd4, 0x9c, 0x42, 0xc6, 0x3d, 0xd8, 0xb3, 0xe8, 0x8a, 0x64, 0x62, 0x9d, 0xfd, 0x68,
	0x52, 0x73, 0xca, 0xf1, 0x79, 0xa7, 0x92, 0xf5, 0xe0, 0x2b, 0x0f, 0xb0, 0xf3, 0xe2, 0x23, 0x40,
	0xe5, 0xf4, 0xda, 0xd6, 0xfc, 0x99, 0x39, 0x73, 0xb5, 0x33, 0x54, 0x93, 0x5a, 0xdf, 0xbf, 0xfd,
	0x38, 0xae, 0x43, 0x0d, 0x3f, 0x81, 0x9e, 0x62, 0xdb, 0x53, 0x5d, 0x55, 0x3c, 0xdd, 0x32, 0xfd,
	0x17, 0xca, 0xb9, 0xe2, 0xaa, 0x8e, 0x6e, 0x7b, 0x68, 0x4f, 0x3a, 0x62, 0x90, 0x08, 0xbd, 0x20,
	0x4d, 0xa3, 0x70, 0x11, 0xd0, 0x30, 0x59, 0x8f, 0xdf, 0x07, 0x1f, 0x82, 0xf2, 0x7c, 0xfc, 0x0c,
	0xc4, 0xaa, 0xd5, 0x52, 0x3d, 0xcd, 0xf3, 0x5d, 0xcf, 0xd1, 0x14, 0x03, 0x35, 0xa4, 0x3e, 0x33,
	0x4b, 0x20, 0x56, 0xcd, 0xc9, 0x82, 0x12, 0xfa, 0x28, 0xa7, 0x19, 0x09, 0x62, 0xfc, 0x10, 0xba,
	0x55, 0xfb, 0x85, 0x31, 0x45, 0x4d, 0xa9, 0xc7, 0x5c, 0x07, 0xd0, 0xad, 0xba, 0xae, 0xe2, 0xe8,
	0x36, 0xfc, 0x46, 0xb7, 0x51, 0xeb, 0x4e, 0xf8, 0x53, 0x98, 0xe2, 0x63, 0x10, 0x3c, 0xed, 0xc2,
	0xf3, 0x55, 0xd7, 0x45, 0xbc, 0x84, 0x18, 0xd5, 0x81, 0x36, 0x25, 0x57, 0x74, 0xbc, 0xa2, 0x71,
	0x84, 0xfb, 0xd0, 0x2e, 0xf4, 0x89, 0x67, 0x4c, 0x51, 0xfd, 0x0e, 0xe0, 0x04, 0xa0, 0x00, 0xec,
	0xa9, 0xa2, 0x9b, 0x88, 0x93, 0x0e, 0x18, 0xf1, 0x1f, 0x40, 0x41, 0xa4, 0x51, 0x10, 0xae, 0xf1,
	0x08, 0x0e, 0x6f, 0x3f, 0xab, 0x3f, 0x33, 0x55, 0xcb, 0x30, 0x2c, 0x13, 0x7d, 0xe6, 0x24, 0x81,
	0x59, 0x78, 0xcc, 0xd5, 0x86, 0x0d, 0x41, 0x40, 0xd7, 0xc3, 0xa6, 0xf0, 0x85, 0x43, 0x7f, 0xae,
	0x9f, 0xae, 0xa0, 0xcb, 0xea, 0xe7, 0xef, 0x2a, 0x86, 0x4f, 0xe4, 0xb2, 0x7f, 0xf2, 0x4d, 0xff,
	0x64, 0x6d, 0xbd, 0x89, 0xcf, 0x83, 0x68, 0x43, 0xac, 0x94, 0x1d, 0x95, 0x8b, 0xbf, 0x7e, 0xfe,
	0xe6, 0x07, 0xdc, 0xa8, 0x73, 0x7a, 0xf8, 0x6f, 0x35, 0x2a, 0x5d, 0x74, 0xf6, 0x59, 0xee, 0x6e,
	0x9e, 0x37, 0x8b, 0xb8, 0xc7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x59, 0x66, 0xff, 0xef,
	0x02, 0x00, 0x00,
}
