// Code generated by protoc-gen-go. DO NOT EDIT.
// source: headers.proto

package web

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CacheControlRequest_Directives int32

const (
	CacheControlRequest_UNUSED_DIRECTIVE CacheControlRequest_Directives = 0
	CacheControlRequest_MAX_AGE          CacheControlRequest_Directives = 1
	CacheControlRequest_MAX_STALE        CacheControlRequest_Directives = 2
	CacheControlRequest_MIN_FRESH        CacheControlRequest_Directives = 3
	CacheControlRequest_NO_CACHE         CacheControlRequest_Directives = 4
	CacheControlRequest_NO_STORE         CacheControlRequest_Directives = 5
	CacheControlRequest_NO_TRANSFORM     CacheControlRequest_Directives = 6
	CacheControlRequest_ONLY_OF_CACHED   CacheControlRequest_Directives = 7
)

var CacheControlRequest_Directives_name = map[int32]string{
	0: "UNUSED_DIRECTIVE",
	1: "MAX_AGE",
	2: "MAX_STALE",
	3: "MIN_FRESH",
	4: "NO_CACHE",
	5: "NO_STORE",
	6: "NO_TRANSFORM",
	7: "ONLY_OF_CACHED",
}

var CacheControlRequest_Directives_value = map[string]int32{
	"UNUSED_DIRECTIVE": 0,
	"MAX_AGE":          1,
	"MAX_STALE":        2,
	"MIN_FRESH":        3,
	"NO_CACHE":         4,
	"NO_STORE":         5,
	"NO_TRANSFORM":     6,
	"ONLY_OF_CACHED":   7,
}

func (x CacheControlRequest_Directives) String() string {
	return proto.EnumName(CacheControlRequest_Directives_name, int32(x))
}

func (CacheControlRequest_Directives) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9cec2a7af668f07b, []int{1, 0}
}

type HeaderDescriptor struct {
	// name of header commonly appearing in HTTP spec, RFCs,
	// and documentation. E.g. "Access-Control-Allow-Credentials".
	HttpName             string   `protobuf:"bytes,1,opt,name=http_name,json=httpName,proto3" json:"http_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeaderDescriptor) Reset()         { *m = HeaderDescriptor{} }
func (m *HeaderDescriptor) String() string { return proto.CompactTextString(m) }
func (*HeaderDescriptor) ProtoMessage()    {}
func (*HeaderDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cec2a7af668f07b, []int{0}
}

func (m *HeaderDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderDescriptor.Unmarshal(m, b)
}
func (m *HeaderDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderDescriptor.Marshal(b, m, deterministic)
}
func (m *HeaderDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderDescriptor.Merge(m, src)
}
func (m *HeaderDescriptor) XXX_Size() int {
	return xxx_messageInfo_HeaderDescriptor.Size(m)
}
func (m *HeaderDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderDescriptor proto.InternalMessageInfo

func (m *HeaderDescriptor) GetHttpName() string {
	if m != nil {
		return m.HttpName
	}
	return ""
}

type CacheControlRequest struct {
	Directive            CacheControlRequest_Directives `protobuf:"varint,1,opt,name=directive,proto3,enum=web.CacheControlRequest_Directives" json:"directive,omitempty"`
	Seconds              uint64                         `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CacheControlRequest) Reset()         { *m = CacheControlRequest{} }
func (m *CacheControlRequest) String() string { return proto.CompactTextString(m) }
func (*CacheControlRequest) ProtoMessage()    {}
func (*CacheControlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cec2a7af668f07b, []int{1}
}

func (m *CacheControlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CacheControlRequest.Unmarshal(m, b)
}
func (m *CacheControlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CacheControlRequest.Marshal(b, m, deterministic)
}
func (m *CacheControlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheControlRequest.Merge(m, src)
}
func (m *CacheControlRequest) XXX_Size() int {
	return xxx_messageInfo_CacheControlRequest.Size(m)
}
func (m *CacheControlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheControlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CacheControlRequest proto.InternalMessageInfo

func (m *CacheControlRequest) GetDirective() CacheControlRequest_Directives {
	if m != nil {
		return m.Directive
	}
	return CacheControlRequest_UNUSED_DIRECTIVE
}

func (m *CacheControlRequest) GetSeconds() uint64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

var E_HeaderDescriptor = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*HeaderDescriptor)(nil),
	Field:         7982732,
	Name:          "web.header_descriptor",
	Tag:           "bytes,7982732,opt,name=header_descriptor",
	Filename:      "headers.proto",
}

func init() {
	proto.RegisterEnum("web.CacheControlRequest_Directives", CacheControlRequest_Directives_name, CacheControlRequest_Directives_value)
	proto.RegisterType((*HeaderDescriptor)(nil), "web.HeaderDescriptor")
	proto.RegisterType((*CacheControlRequest)(nil), "web.CacheControlRequest")
	proto.RegisterExtension(E_HeaderDescriptor)
}

func init() { proto.RegisterFile("headers.proto", fileDescriptor_9cec2a7af668f07b) }

var fileDescriptor_9cec2a7af668f07b = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcb, 0x4e, 0xc2, 0x40,
	0x18, 0x85, 0x2d, 0x20, 0xd0, 0xe1, 0x92, 0x71, 0xd4, 0xa4, 0xd1, 0x98, 0x34, 0xb8, 0x61, 0x55,
	0x12, 0xdc, 0xb9, 0x6b, 0xda, 0xa9, 0x90, 0x40, 0x9b, 0x4c, 0x8b, 0xd1, 0xd5, 0xa4, 0x97, 0x91,
	0x36, 0x81, 0x4e, 0x6d, 0x07, 0x79, 0x01, 0x97, 0x26, 0x3e, 0x81, 0xcf, 0xe7, 0x6b, 0x18, 0x5a,
	0x91, 0x84, 0xb8, 0x3c, 0xe7, 0x3f, 0xdf, 0xbf, 0xf8, 0x40, 0x2f, 0x66, 0x7e, 0xc4, 0xf2, 0x42,
	0xcb, 0x72, 0x2e, 0x38, 0xaa, 0x6f, 0x59, 0x70, 0xa5, 0x2e, 0x39, 0x5f, 0xae, 0xd8, 0xa8, 0xac,
	0x82, 0xcd, 0xcb, 0x28, 0x62, 0x45, 0x98, 0x27, 0x99, 0xe0, 0x79, 0x35, 0x1b, 0x8c, 0x00, 0x9c,
	0x94, 0x9c, 0xf9, 0x77, 0x41, 0xd7, 0x40, 0x8e, 0x85, 0xc8, 0x68, 0xea, 0xaf, 0x99, 0x22, 0xa9,
	0xd2, 0x50, 0x26, 0xed, 0x5d, 0x61, 0xfb, 0x6b, 0x36, 0x78, 0xaf, 0x81, 0x73, 0xc3, 0x0f, 0x63,
	0x66, 0xf0, 0x54, 0xe4, 0x7c, 0x45, 0xd8, 0xeb, 0x86, 0x15, 0x02, 0xe9, 0x40, 0x8e, 0x92, 0x9c,
	0x85, 0x22, 0x79, 0xab, 0xa0, 0xfe, 0xf8, 0x56, 0xdb, 0xb2, 0x40, 0xfb, 0x67, 0xac, 0x99, 0xfb,
	0x65, 0x41, 0x0e, 0x14, 0x52, 0x40, 0xab, 0x60, 0x21, 0x4f, 0xa3, 0x42, 0xa9, 0xa9, 0xd2, 0xb0,
	0x41, 0xf6, 0x71, 0xf0, 0x29, 0x01, 0x70, 0x60, 0xd0, 0x05, 0x80, 0x0b, 0x7b, 0xe1, 0x62, 0x93,
	0x9a, 0x53, 0x82, 0x0d, 0x6f, 0xfa, 0x88, 0xe1, 0x09, 0xea, 0x80, 0xd6, 0x5c, 0x7f, 0xa2, 0xfa,
	0x03, 0x86, 0x12, 0xea, 0x01, 0x79, 0x17, 0x5c, 0x4f, 0x9f, 0x61, 0x58, 0x2b, 0xe3, 0xd4, 0xa6,
	0x16, 0xc1, 0xee, 0x04, 0xd6, 0x51, 0x17, 0xb4, 0x6d, 0x87, 0x1a, 0xba, 0x31, 0xc1, 0xb0, 0xf1,
	0x9b, 0x5c, 0xcf, 0x21, 0x18, 0x9e, 0x22, 0x08, 0xba, 0xb6, 0x43, 0x3d, 0xa2, 0xdb, 0xae, 0xe5,
	0x90, 0x39, 0x6c, 0x22, 0x04, 0xfa, 0x8e, 0x3d, 0x7b, 0xa6, 0x8e, 0x55, 0x21, 0x26, 0x6c, 0xdd,
	0x47, 0xe0, 0xac, 0xf2, 0x4d, 0x0f, 0x4a, 0xd1, 0x8d, 0x56, 0xf9, 0xd6, 0xf6, 0xbe, 0x35, 0x2b,
	0x61, 0xab, 0xc8, 0xc9, 0x44, 0xc2, 0xd3, 0x42, 0xf9, 0xf8, 0xfa, 0xae, 0xab, 0xd2, 0xb0, 0x33,
	0xbe, 0x2c, 0xc5, 0x1c, 0x7b, 0x27, 0x30, 0x3e, 0x6a, 0x82, 0x66, 0xf9, 0xe8, 0xee, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xcc, 0x4b, 0x0d, 0x30, 0xdc, 0x01, 0x00, 0x00,
}
